[
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "CheckConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "CheckConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "subqueryload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.config.database",
        "description": "app.config.database",
        "isExtraImport": true,
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "JSONDecodeError",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "find_similar_entities",
        "importPath": "app.data.entityData",
        "description": "app.data.entityData",
        "isExtraImport": true,
        "detail": "app.data.entityData",
        "documentation": {}
    },
    {
        "label": "sendEmailInternal",
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "isExtraImport": true,
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "sendEmail",
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "isExtraImport": true,
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "sendEmail",
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "isExtraImport": true,
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "sendEmailInternal",
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "isExtraImport": true,
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "sendEmailWithMultipleAttachments",
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "isExtraImport": true,
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "sendEmail",
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "isExtraImport": true,
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "NewsCorporations",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Tokens",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Media",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Media",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "entity",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Media",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "entity",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "NewsCorporations",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "app.models.common",
        "description": "app.models.common",
        "isExtraImport": true,
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "NewsInput",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsInput",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsCategory",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsLocation",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsCategory",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "Newsentities",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsAffiliates",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsMedia",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "News",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsInput",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsInput",
        "importPath": "app.models.news",
        "description": "app.models.news",
        "isExtraImport": true,
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "add_news_from_newsInput",
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "isExtraImport": true,
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_by_title",
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "isExtraImport": true,
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_by_title",
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "isExtraImport": true,
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "delete_news_by_title",
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "isExtraImport": true,
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "isExtraImport": true,
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "extract_news_info",
        "importPath": "app.cron.openAI",
        "description": "app.cron.openAI",
        "isExtraImport": true,
        "detail": "app.cron.openAI",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "gather",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "EventRegistry",
        "importPath": "eventregistry",
        "description": "eventregistry",
        "isExtraImport": true,
        "detail": "eventregistry",
        "documentation": {}
    },
    {
        "label": "QueryArticlesIter",
        "importPath": "eventregistry",
        "description": "eventregistry",
        "isExtraImport": true,
        "detail": "eventregistry",
        "documentation": {}
    },
    {
        "label": "ReturnInfo",
        "importPath": "eventregistry",
        "description": "eventregistry",
        "isExtraImport": true,
        "detail": "eventregistry",
        "documentation": {}
    },
    {
        "label": "ArticleInfoFlags",
        "importPath": "eventregistry",
        "description": "eventregistry",
        "isExtraImport": true,
        "detail": "eventregistry",
        "documentation": {}
    },
    {
        "label": "SourceInfoFlags",
        "importPath": "eventregistry",
        "description": "eventregistry",
        "isExtraImport": true,
        "detail": "eventregistry",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "get_category_by_parentID",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "get_category_by_parentID",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "add_news_to_bookmark",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "check_news_exists_by_id",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "fetch_news_by_id",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "fetch_news_by_id_authenticated",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "get_all_bookmarks_for_user",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "get_category_by_parentID",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "get_category_by_topic",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "get_entity",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "create_category_following",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "create_entity_following",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "get_category_by_topic",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "get_entity",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "get_entity",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "add_entity",
        "importPath": "app.data.newsData",
        "description": "app.data.newsData",
        "isExtraImport": true,
        "detail": "app.data.newsData",
        "documentation": {}
    },
    {
        "label": "NewsPlease",
        "importPath": "newsplease",
        "description": "newsplease",
        "isExtraImport": true,
        "detail": "newsplease",
        "documentation": {}
    },
    {
        "label": "aiomysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiomysql",
        "description": "aiomysql",
        "detail": "aiomysql",
        "documentation": {}
    },
    {
        "label": "create_pool",
        "importPath": "aiomysql",
        "description": "aiomysql",
        "isExtraImport": true,
        "detail": "aiomysql",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "aiomysql",
        "description": "aiomysql",
        "isExtraImport": true,
        "detail": "aiomysql",
        "documentation": {}
    },
    {
        "label": "bcrypt_context",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "oauth2_bearer",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "bcrypt_context",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "oauth2_bearer",
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "isExtraImport": true,
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "emailConfig",
        "importPath": "app.email.emailConfig",
        "description": "app.email.emailConfig",
        "isExtraImport": true,
        "detail": "app.email.emailConfig",
        "documentation": {}
    },
    {
        "label": "MIMEBase",
        "importPath": "email.mime.base",
        "description": "email.mime.base",
        "isExtraImport": true,
        "detail": "email.mime.base",
        "documentation": {}
    },
    {
        "label": "encoders",
        "importPath": "email",
        "description": "email",
        "isExtraImport": true,
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "delete_user_func",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_refresh_token",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "register_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "delete_user_func",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_loggedin_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "initiate_password_reset",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "change_password",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "check_token",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "confirm_token_and_activate_account",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "generate_token",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "user_to_json",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "new_user_to_json",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "decode_jwt",
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "isExtraImport": true,
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "UserInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "DeleteUserInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "ChangePasswordInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "ContactUsInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "reportBugInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UsernameCheckInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UpdateProfileInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "ChangePasswordInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "DeleteUserInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UserInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UserInput",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "_rate_limit_exceeded_handler",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "RateLimitExceeded",
        "importPath": "slowapi.errors",
        "description": "slowapi.errors",
        "isExtraImport": true,
        "detail": "slowapi.errors",
        "documentation": {}
    },
    {
        "label": "RateLimitExceeded",
        "importPath": "slowapi.errors",
        "description": "slowapi.errors",
        "isExtraImport": true,
        "detail": "slowapi.errors",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "save_media",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "add_category_db",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_category",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "delete_last_category",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_media_by_name_and_type",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "delete_media",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_category_by_id",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_category_by_id",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_entity_byID",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "add_news_categories_db",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_media_by_url",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "add_news_categories_db",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "add_category_db",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_category",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "delete_last_category",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "isExtraImport": true,
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "upload_to_spaces",
        "importPath": "app.util.fileUpload",
        "description": "app.util.fileUpload",
        "isExtraImport": true,
        "detail": "app.util.fileUpload",
        "documentation": {}
    },
    {
        "label": "delete_from_spaces",
        "importPath": "app.util.fileUpload",
        "description": "app.util.fileUpload",
        "isExtraImport": true,
        "detail": "app.util.fileUpload",
        "documentation": {}
    },
    {
        "label": "DeleteError",
        "importPath": "app.util.fileUpload",
        "description": "app.util.fileUpload",
        "isExtraImport": true,
        "detail": "app.util.fileUpload",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "token_hex",
        "importPath": "secrets",
        "description": "secrets",
        "isExtraImport": true,
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "magic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "magic",
        "description": "magic",
        "detail": "magic",
        "documentation": {}
    },
    {
        "label": "extract_entities",
        "importPath": "app.services.newsAnalyzer",
        "description": "app.services.newsAnalyzer",
        "isExtraImport": true,
        "detail": "app.services.newsAnalyzer",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "get_user_all_newsSource_preferences",
        "importPath": "app.data.newsSourceData",
        "description": "app.data.newsSourceData",
        "isExtraImport": true,
        "detail": "app.data.newsSourceData",
        "documentation": {}
    },
    {
        "label": "get_all_news_sources_db",
        "importPath": "app.data.newsSourceData",
        "description": "app.data.newsSourceData",
        "isExtraImport": true,
        "detail": "app.data.newsSourceData",
        "documentation": {}
    },
    {
        "label": "insert_default_news_sources_for_user",
        "importPath": "app.data.newsSourceData",
        "description": "app.data.newsSourceData",
        "isExtraImport": true,
        "detail": "app.data.newsSourceData",
        "documentation": {}
    },
    {
        "label": "user_dependency",
        "importPath": "app.routers.userRouter",
        "description": "app.routers.userRouter",
        "isExtraImport": true,
        "detail": "app.routers.userRouter",
        "documentation": {}
    },
    {
        "label": "user_dependency",
        "importPath": "app.routers.userRouter",
        "description": "app.routers.userRouter",
        "isExtraImport": true,
        "detail": "app.routers.userRouter",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "sqlalchemy.sql.annotation",
        "description": "sqlalchemy.sql.annotation",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.annotation",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "starlette.exceptions",
        "description": "starlette.exceptions",
        "isExtraImport": true,
        "detail": "starlette.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "starlette.exceptions",
        "description": "starlette.exceptions",
        "isExtraImport": true,
        "detail": "starlette.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "starlette.exceptions",
        "description": "starlette.exceptions",
        "isExtraImport": true,
        "detail": "starlette.exceptions",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "add_user_blacklist",
        "importPath": "app.data.preferencData",
        "description": "app.data.preferencData",
        "isExtraImport": true,
        "detail": "app.data.preferencData",
        "documentation": {}
    },
    {
        "label": "remove_user_blacklist",
        "importPath": "app.data.preferencData",
        "description": "app.data.preferencData",
        "isExtraImport": true,
        "detail": "app.data.preferencData",
        "documentation": {}
    },
    {
        "label": "get_default_preferences",
        "importPath": "app.data.preferencData",
        "description": "app.data.preferencData",
        "isExtraImport": true,
        "detail": "app.data.preferencData",
        "documentation": {}
    },
    {
        "label": "delete_all_user_preferences",
        "importPath": "app.data.preferencData",
        "description": "app.data.preferencData",
        "isExtraImport": true,
        "detail": "app.data.preferencData",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.data.preferencData",
        "description": "app.data.preferencData",
        "isExtraImport": true,
        "detail": "app.data.preferencData",
        "documentation": {}
    },
    {
        "label": "reset_preference_for_user",
        "importPath": "app.services.preferenceService",
        "description": "app.services.preferenceService",
        "isExtraImport": true,
        "detail": "app.services.preferenceService",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.preferenceService",
        "description": "app.services.preferenceService",
        "isExtraImport": true,
        "detail": "app.services.preferenceService",
        "documentation": {}
    },
    {
        "label": "check_username_in_db",
        "importPath": "app.data.userData",
        "description": "app.data.userData",
        "isExtraImport": true,
        "detail": "app.data.userData",
        "documentation": {}
    },
    {
        "label": "update_username_in_db",
        "importPath": "app.data.userData",
        "description": "app.data.userData",
        "isExtraImport": true,
        "detail": "app.data.userData",
        "documentation": {}
    },
    {
        "label": "update_first_name_in_db",
        "importPath": "app.data.userData",
        "description": "app.data.userData",
        "isExtraImport": true,
        "detail": "app.data.userData",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.data.userData",
        "description": "app.data.userData",
        "isExtraImport": true,
        "detail": "app.data.userData",
        "documentation": {}
    },
    {
        "label": "verify_old_password",
        "importPath": "app.data.userData",
        "description": "app.data.userData",
        "isExtraImport": true,
        "detail": "app.data.userData",
        "documentation": {}
    },
    {
        "label": "update_user_password",
        "importPath": "app.data.userData",
        "description": "app.data.userData",
        "isExtraImport": true,
        "detail": "app.data.userData",
        "documentation": {}
    },
    {
        "label": "get_user_by_id",
        "importPath": "app.data.userData",
        "description": "app.data.userData",
        "isExtraImport": true,
        "detail": "app.data.userData",
        "documentation": {}
    },
    {
        "label": "get_all_entity_following",
        "importPath": "app.services.userService",
        "description": "app.services.userService",
        "isExtraImport": true,
        "detail": "app.services.userService",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.userService",
        "description": "app.services.userService",
        "isExtraImport": true,
        "detail": "app.services.userService",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "URLSafeTimedSerializer",
        "importPath": "itsdangerous",
        "description": "itsdangerous",
        "isExtraImport": true,
        "detail": "itsdangerous",
        "documentation": {}
    },
    {
        "label": "create_news_category",
        "importPath": "app.services.categoryService",
        "description": "app.services.categoryService",
        "isExtraImport": true,
        "detail": "app.services.categoryService",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "WordNetLemmatizer",
        "importPath": "nltk.stem",
        "description": "nltk.stem",
        "isExtraImport": true,
        "detail": "nltk.stem",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "Writer",
        "importPath": "app.models.writer",
        "description": "app.models.writer",
        "isExtraImport": true,
        "detail": "app.models.writer",
        "documentation": {}
    },
    {
        "label": "Writer",
        "importPath": "app.models.writer",
        "description": "app.models.writer",
        "isExtraImport": true,
        "detail": "app.models.writer",
        "documentation": {}
    },
    {
        "label": "find_city_by_name",
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "isExtraImport": true,
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "find_province_by_name",
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "isExtraImport": true,
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "find_continent_by_country",
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "isExtraImport": true,
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "isExtraImport": true,
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "validate_writer",
        "importPath": "app.services.writerService",
        "description": "app.services.writerService",
        "isExtraImport": true,
        "detail": "app.services.writerService",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "boto3",
        "description": "boto3",
        "isExtraImport": true,
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "NoCredentialsError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "test_login_valid_user",
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "isExtraImport": true,
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_login_valid_user",
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "isExtraImport": true,
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "login_test_user",
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "isExtraImport": true,
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "create_autospec",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "run_news_cron_job",
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "isExtraImport": true,
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "run_getNews_for_one_corporation",
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "isExtraImport": true,
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "authRouter",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "commonRouter",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "locationRouter",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "newsRouter",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "userRouter",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "preferenceRouter",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "newsSourceRouter",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "conn_params = {\n    \"host\": os.getenv(\"DATABASE_HOST\", \"localhost\"),\n    \"port\": int(os.getenv(\"DATABASE_PORT\", \"3306\")),  # Convert port to integer\n    \"user\": os.getenv(\"DATABASE_USERNAME\", \"root\"),\n    \"password\": os.getenv(\"DATABASE_PASSWORD\", \"password\"),\n    \"db\": os.getenv(\"DATABASE_NAME\", \"newsdb\"),\n}\nSQLALCHEMY_DATABASE_URL = os.getenv(\"DATABASE_URL\", \"sqlite:///./fallback.db\")\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={}",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = os.getenv(\"DATABASE_URL\", \"sqlite:///./fallback.db\")\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "engine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.config.database",
        "description": "app.config.database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "app.config.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndb_dependency = Annotated[Session, Depends(get_db)]\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")",
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "db_dependency",
        "kind": 5,
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "peekOfCode": "db_dependency = Annotated[Session, Depends(get_db)]\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")",
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "bcrypt_context",
        "kind": 5,
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "peekOfCode": "bcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")",
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "oauth2_bearer",
        "kind": 5,
        "importPath": "app.config.dependencies",
        "description": "app.config.dependencies",
        "peekOfCode": "oauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"auth/token\")",
        "detail": "app.config.dependencies",
        "documentation": {}
    },
    {
        "label": "could_be_json",
        "kind": 2,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "def could_be_json(s):\n    try:\n        loads(s)\n        return True\n    except (ValueError, TypeError, JSONDecodeError):\n        return False\ndef is_gibberish(s):\n    # Regex to find sequences of non-alphanumeric characters\n    non_alnum_seq = re.compile(r'[^a-zA-Z\\d\\s:]{3,}')\n    if non_alnum_seq.search(s):",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "is_gibberish",
        "kind": 2,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "def is_gibberish(s):\n    # Regex to find sequences of non-alphanumeric characters\n    non_alnum_seq = re.compile(r'[^a-zA-Z\\d\\s:]{3,}')\n    if non_alnum_seq.search(s):\n        return True\n    return False\n# Load environment variables\nload_dotenv()\n# API credentials and endpoints\nnewsdata_io_api_key = 'pub_335322fdff4a6749083e621c7fb413696b162'",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef write_to_json_file(filename,data):\n    print(\"LOG: Writing news to json file...\")\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "write_to_json_file",
        "kind": 2,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "def write_to_json_file(filename,data):\n    print(\"LOG: Writing news to json file...\")\n    with open(filename, 'w') as f:\n        json.dump(data, f, indent=4)\ndef fetch_news_for_corporation(corporation):\n    # Assuming make_news_api_call takes category name and corporation shortName\n    er = EventRegistry(apiKey='2084a034-acf9-46be-8c5f-26851ff83d3f')\n    sourceUri = er.getSourceUri(corporation)\n    news_list = []\n    # Get the current time and 12 hours ago",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "fetch_news_for_corporation",
        "kind": 2,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "def fetch_news_for_corporation(corporation):\n    # Assuming make_news_api_call takes category name and corporation shortName\n    er = EventRegistry(apiKey='2084a034-acf9-46be-8c5f-26851ff83d3f')\n    sourceUri = er.getSourceUri(corporation)\n    news_list = []\n    # Get the current time and 12 hours ago\n    current_time = datetime.now()\n    twelve_hours_ago = current_time - timedelta(hours=6)\n    if(sourceUri == None or not sourceUri):\n        return []",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "process_news_item",
        "kind": 2,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "def process_news_item(news_item, news_corporation_id):\n    # Convert dateTimePub to MySQL datetime format\n    pub_date_str = news_item.get('dateTimePub', '')\n    pub_date = datetime.strptime(pub_date_str, '%Y-%m-%dT%H:%M:%SZ') if pub_date_str else datetime.now()\n    # Get the body of the news item\n    body = news_item.get('body', '')\n    # Check if body is JSON-like or gibberish\n    if could_be_json(body) or is_gibberish(body):\n        body = \"UNREADABLE\"\n    else:",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "datetime_converter",
        "kind": 2,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "def datetime_converter(o):\n    if isinstance(o, datetime):\n        return o.isoformat()\n    elif hasattr(o, '__dict__'):\n        return o.__dict__\n    else:\n        return str(o)\nasync def get_news_for_corporation_and_save(news_corporation, news_corporation_id):\n    global number_of_news_added, number_of_warnings_occured, number_of_errors_occured, message, error_message\n    global categories_per_corporation, overall_categories_count",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "send_cron_job_summary_email",
        "kind": 2,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "def send_cron_job_summary_email():\n    global message, error_message\n    # Adding category count information to the email\n    category_count_message = \"\\nCategory Summary:\\n\"\n    for corporation, categories in categories_per_corporation.items():\n        category_count_message += f\"{corporation}:\\n\"\n        for category, count in categories.items():\n            category_count_message += f\"    {category}: {count}\\n\"\n    category_count_message += \"\\nOverall Categories Count:\\n\"\n    for category, count in overall_categories_count.items():",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "newsdata_io_api_key",
        "kind": 5,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "newsdata_io_api_key = 'pub_335322fdff4a6749083e621c7fb413696b162'\nnumber_of_news_added = 0\nnumber_of_warnings_occured = 0\nnumber_of_errors_occured = 0\nmessage = \"\"\nerror_message = \"\"\ncategories_per_corporation = {}\noverall_categories_count = {}\ndef get_db():\n    db = SessionLocal()",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "number_of_news_added",
        "kind": 5,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "number_of_news_added = 0\nnumber_of_warnings_occured = 0\nnumber_of_errors_occured = 0\nmessage = \"\"\nerror_message = \"\"\ncategories_per_corporation = {}\noverall_categories_count = {}\ndef get_db():\n    db = SessionLocal()\n    try:",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "number_of_warnings_occured",
        "kind": 5,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "number_of_warnings_occured = 0\nnumber_of_errors_occured = 0\nmessage = \"\"\nerror_message = \"\"\ncategories_per_corporation = {}\noverall_categories_count = {}\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "number_of_errors_occured",
        "kind": 5,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "number_of_errors_occured = 0\nmessage = \"\"\nerror_message = \"\"\ncategories_per_corporation = {}\noverall_categories_count = {}\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "message = \"\"\nerror_message = \"\"\ncategories_per_corporation = {}\noverall_categories_count = {}\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "error_message",
        "kind": 5,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "error_message = \"\"\ncategories_per_corporation = {}\noverall_categories_count = {}\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef write_to_json_file(filename,data):",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "categories_per_corporation",
        "kind": 5,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "categories_per_corporation = {}\noverall_categories_count = {}\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef write_to_json_file(filename,data):\n    print(\"LOG: Writing news to json file...\")",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "overall_categories_count",
        "kind": 5,
        "importPath": "app.cron.newsJob",
        "description": "app.cron.newsJob",
        "peekOfCode": "overall_categories_count = {}\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef write_to_json_file(filename,data):\n    print(\"LOG: Writing news to json file...\")\n    with open(filename, 'w') as f:",
        "detail": "app.cron.newsJob",
        "documentation": {}
    },
    {
        "label": "get_news_function",
        "kind": 2,
        "importPath": "app.cron.openAI",
        "description": "app.cron.openAI",
        "peekOfCode": "def get_news_function(categories):\n    return{\n        'name': 'extract_news_info',\n        'description': 'Get news entities, categories, isLocal, and location',\n        'parameters': {\n            'type': 'object',\n            'properties': {\n                'category': {\n                    'type': 'string',\n                    'enum': categories,",
        "detail": "app.cron.openAI",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "app.cron.openAI",
        "description": "app.cron.openAI",
        "peekOfCode": "client = OpenAI(\n  api_key=os.getenv('OPENAI_API_KEY'),\n)\ndef get_news_function(categories):\n    return{\n        'name': 'extract_news_info',\n        'description': 'Get news entities, categories, isLocal, and location',\n        'parameters': {\n            'type': 'object',\n            'properties': {",
        "detail": "app.cron.openAI",
        "documentation": {}
    },
    {
        "label": "extract_info",
        "kind": 2,
        "importPath": "app.cron.Scraper",
        "description": "app.cron.Scraper",
        "peekOfCode": "def extract_info(url:str):\n    article = NewsPlease.from_url(url)\n    return {\n        'title': article.title,\n        'text': article.maintext,\n        'image': \"\",\n        'date': article.date_publish\n    }\narticle= extract_info('https://www.cbc.ca/news/politics/danielle-smith-liberal-government-trade-barbs-trans-1.7105175')\n# Check if the date includes timezone information",
        "detail": "app.cron.Scraper",
        "documentation": {}
    },
    {
        "label": "articles",
        "kind": 5,
        "importPath": "app.cron.Scraper",
        "description": "app.cron.Scraper",
        "peekOfCode": "articles = []\ndef extract_info(url:str):\n    article = NewsPlease.from_url(url)\n    return {\n        'title': article.title,\n        'text': article.maintext,\n        'image': \"\",\n        'date': article.date_publish\n    }\narticle= extract_info('https://www.cbc.ca/news/politics/danielle-smith-liberal-government-trade-barbs-trans-1.7105175')",
        "detail": "app.cron.Scraper",
        "documentation": {}
    },
    {
        "label": "emailConfig",
        "kind": 5,
        "importPath": "app.email.emailConfig",
        "description": "app.email.emailConfig",
        "peekOfCode": "emailConfig = {\n    \"forgetPassword\": {\n        \"subject\": \"Reset your password\",\n        \"html_file\": \"app/email/html/forgetPassword.html\"\n    },\n    \"activateAccount\": {\n        \"subject\": \"Activate your account\",\n        \"html_file\": \"app/email/html/activateAccount.html\"\n    }\n}",
        "detail": "app.email.emailConfig",
        "documentation": {}
    },
    {
        "label": "sendEmailWithMultipleAttachments",
        "kind": 2,
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "peekOfCode": "def sendEmailWithMultipleAttachments(sender, recipient, subject, message, file_locations):\n    try:\n        # SMTP server credentials\n        username = 'farabix.com'\n        password = 't29CBb3uRNFqoF4N'\n        # Create a multipart message\n        msg = MIMEMultipart()\n        msg['Subject'] = subject\n        msg['From'] = sender\n        msg['To'] = recipient",
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "sendEmailInternal",
        "kind": 2,
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "peekOfCode": "def sendEmailInternal(sender, recipient, subject, message):\n    try:\n        # SMTP server credentials\n        username = 'farabix.com'\n        password = 't29CBb3uRNFqoF4N'\n        # Create a multipart message\n        msg = MIMEMultipart('mixed')\n        msg['Subject'] = subject\n        msg['From'] = sender\n        msg['To'] = recipient",
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "sendEmail",
        "kind": 2,
        "importPath": "app.email.sendEmail",
        "description": "app.email.sendEmail",
        "peekOfCode": "def sendEmail(sender, recipient, email_type, url=None):\n    # SMTP server credentials\n    username = 'farabix.com'\n    password = 't29CBb3uRNFqoF4N'\n    email_content = emailConfig[email_type]\n    # Create a multipart message\n    msg = MIMEMultipart('mixed')\n    msg['Subject'] = email_content['subject']\n    msg['From'] = sender\n    msg['To'] = recipient",
        "detail": "app.email.sendEmail",
        "documentation": {}
    },
    {
        "label": "Tokens",
        "kind": 6,
        "importPath": "app.models.common",
        "description": "app.models.common",
        "peekOfCode": "class Tokens(Base):\n    __tablename__ = \"tokens\"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    token = Column(String(255), nullable=False)  # Length specified for VARCHAR\n    expiration_date = Column(DateTime(timezone=True), nullable=False)\n    creation_date = Column(DateTime(timezone=True), server_default=func.now())\n    used = Column(Boolean, default=False, nullable=False)\n    invalidated = Column(Boolean, default=False, nullable=False)\nclass Media(Base):",
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Media",
        "kind": 6,
        "importPath": "app.models.common",
        "description": "app.models.common",
        "peekOfCode": "class Media(Base):\n    __tablename__ = \"media\"\n    id = Column(Integer, primary_key=True, index=True)\n    type = Column(String(30), nullable=False)\n    fileName = Column(String(1000), nullable=False)\n    fileExtension = Column(String(20), nullable=False)\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\nclass NewsCorporations(Base):\n    __tablename__ = \"newsCorporations\"",
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "NewsCorporations",
        "kind": 6,
        "importPath": "app.models.common",
        "description": "app.models.common",
        "peekOfCode": "class NewsCorporations(Base):\n    __tablename__ = \"newsCorporations\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(100))\n    parent = Column(String(100))\n    url = Column(String(300))\n    logo = Column(String(300))\n    language = Column(String(100))\n    location = Column(String(100))\nclass Language(Base):",
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Language",
        "kind": 6,
        "importPath": "app.models.common",
        "description": "app.models.common",
        "peekOfCode": "class Language(Base):\n    __tablename__ = \"languages\"\n    id = Column(Integer, primary_key=True, index=True)\n    code = Column(String(10), unique=True, index=True)\n    name = Column(String(50))\n    native = Column(String(50))\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\nclass entity(Base):\n    __tablename__ = \"entities\"",
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "entity",
        "kind": 6,
        "importPath": "app.models.common",
        "description": "app.models.common",
        "peekOfCode": "class entity(Base):\n    __tablename__ = \"entities\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(200))\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\nclass Category(Base):\n    __tablename__ = \"categories\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(50))",
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "app.models.common",
        "description": "app.models.common",
        "peekOfCode": "class Category(Base):\n    __tablename__ = \"categories\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(50))\n    parent_id = Column(Integer, nullable=False)\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())",
        "detail": "app.models.common",
        "documentation": {}
    },
    {
        "label": "Continent",
        "kind": 6,
        "importPath": "app.models.location",
        "description": "app.models.location",
        "peekOfCode": "class Continent(Base):\n    __tablename__ = \"continents\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(50))\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\nclass Country(Base):\n    __tablename__ = \"countries\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(100))",
        "detail": "app.models.location",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "app.models.location",
        "description": "app.models.location",
        "peekOfCode": "class Country(Base):\n    __tablename__ = \"countries\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(100))\n    code = Column(String(5))\n    capital = Column(String(100))\n    phone = Column(String(20))\n    native = Column(String(100))\n    currency = Column(String(5))\n    continent_id = Column(Integer, ForeignKey('continents.id'))",
        "detail": "app.models.location",
        "documentation": {}
    },
    {
        "label": "Province",
        "kind": 6,
        "importPath": "app.models.location",
        "description": "app.models.location",
        "peekOfCode": "class Province(Base):\n    __tablename__ = \"provinces\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(100))\n    code = Column(String(5))\n    country_id = Column(Integer, ForeignKey('countries.id'))\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\nclass City(Base):\n    __tablename__ = \"cities\"",
        "detail": "app.models.location",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "app.models.location",
        "description": "app.models.location",
        "peekOfCode": "class City(Base):\n    __tablename__ = \"cities\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(100))\n    province_id = Column(Integer, ForeignKey('provinces.id'))\n    country_id = Column(Integer, ForeignKey('countries.id'))\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())",
        "detail": "app.models.location",
        "documentation": {}
    },
    {
        "label": "News",
        "kind": 6,
        "importPath": "app.models.news",
        "description": "app.models.news",
        "peekOfCode": "class News(Base):\n    \"\"\"\n    Table to store news articles.\n    \"\"\"\n    __tablename__ = \"news\"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String(300), nullable=False)  # Title is required\n    shortSummary = Column(String(500), nullable=False) \n    longSummary = Column(String(2000), nullable=False) \n    content = Column(Text, nullable=False)  # Content is required",
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsLocation",
        "kind": 6,
        "importPath": "app.models.news",
        "description": "app.models.news",
        "peekOfCode": "class NewsLocation(Base):\n    __tablename__ = \"newsLocations\"\n    id = Column(Integer, primary_key=True)  # New auto-increment primary key\n    news_id = Column(Integer, ForeignKey('news.id'))\n    continent_id = Column(Integer, ForeignKey('continents.id'), nullable=True)\n    country_id = Column(Integer, ForeignKey('countries.id'), nullable=True)\n    province_id = Column(Integer, ForeignKey('provinces.id'), nullable=True)\n    city_id = Column(Integer, ForeignKey('cities.id'), nullable=True)\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())",
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsCategory",
        "kind": 6,
        "importPath": "app.models.news",
        "description": "app.models.news",
        "peekOfCode": "class NewsCategory(Base):\n    \"\"\"\n    Table to store news categories associated with articles.\n    \"\"\"\n    __tablename__ = \"newsCategories\"\n    news_id = Column(Integer, ForeignKey('news.id'), primary_key=True)\n    category_id = Column(Integer, ForeignKey('categories.id'), primary_key=True)\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\n    # Define a relationship with News",
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "Newsentities",
        "kind": 6,
        "importPath": "app.models.news",
        "description": "app.models.news",
        "peekOfCode": "class Newsentities(Base):\n    \"\"\"\n    Table to store entities associated with news articles.\n    \"\"\"\n    __tablename__ = \"newsEntities\"\n    news_id = Column(Integer, ForeignKey('news.id'), primary_key=True)\n    entity_id = Column(Integer, ForeignKey('entities.id'), primary_key=True)\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\n    # Define a relationship with News",
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsWriters",
        "kind": 6,
        "importPath": "app.models.news",
        "description": "app.models.news",
        "peekOfCode": "class NewsWriters(Base):\n    \"\"\"\n    Table to store entities associated with news articles.\n    \"\"\"\n    __tablename__ = \"newsWriters\"\n    news_id = Column(Integer, ForeignKey('news.id'), primary_key=True)\n    writer_id = Column(Integer, ForeignKey('writers.id'), primary_key=True)\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\n    # Define a relationship with News",
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsAffiliates",
        "kind": 6,
        "importPath": "app.models.news",
        "description": "app.models.news",
        "peekOfCode": "class NewsAffiliates(Base):\n    \"\"\"\n    Table to store news affiliates and their external links.\n    \"\"\"\n    __tablename__ = \"newsAffiliates\"\n    news_id = Column(Integer, ForeignKey('news.id'), primary_key=True)\n    newsCorporation_id = Column(Integer, ForeignKey('newsCorporations.id'), primary_key=True)\n    externalLink = Column(String(300), primary_key=True)\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())",
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsMedia",
        "kind": 6,
        "importPath": "app.models.news",
        "description": "app.models.news",
        "peekOfCode": "class NewsMedia(Base):\n    \"\"\"\n    Table to store media sources associated with news articles.\n    \"\"\"\n    __tablename__ = \"newsMedia\"\n    news_id = Column(Integer, ForeignKey('news.id'), primary_key=True)\n    media_id = Column(Integer, ForeignKey('media.id'), primary_key=True)\n    createdAt = Column(DateTime(timezone=True), server_default=func.now())\n    updatedAt = Column(DateTime(timezone=True), onupdate=func.now())\n    # Define a relationship with News",
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "NewsInput",
        "kind": 6,
        "importPath": "app.models.news",
        "description": "app.models.news",
        "peekOfCode": "class NewsInput(BaseModel):\n    title: str\n    shortSummary: Optional[str] = None\n    longSummary: Optional[str] = None\n    content: str\n    publishedDate: datetime\n    language_id: int\n    isInternal: bool = False\n    ProcessedForIdentity: bool = False\n    writer_id: Optional[str]  # ID of the writer",
        "detail": "app.models.news",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    first_name = Column(String(100), nullable=False)\n    last_name = Column(String(100), nullable=False)\n    profile_picture_id = Column(Integer, ForeignKey('media.id'), nullable=True)  # Allow null for profile picture\n    is_active = Column(Boolean, nullable=False, default=True)  # Renamed to is_active\n    username = Column(String(100), nullable=False, unique=True)\n    hashed_password = Column(String(300), nullable=False)  # Renamed to hashed_password\n    email = Column(String(300), nullable=False, unique=True)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UserWriterFollowing",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class UserWriterFollowing(Base):\n    __tablename__ = \"user_writer_following\"\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id'))\n    writer_id = Column(Integer, ForeignKey('writers.id'))\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n################################### pydantics ###################################\nclass UserInput(BaseModel):\n    username: Optional[str] = Field(default=None, min_length=2, max_length=100)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UserInput",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class UserInput(BaseModel):\n    username: Optional[str] = Field(default=None, min_length=2, max_length=100)\n    email: EmailStr = Field(...)  # Validates email format\n    first_name: str = Field(min_length=2, max_length=100)\n    last_name: str = Field(min_length=1, max_length=100)\n    password: str = Field(min_length=8, max_length=300)\n    confirmPassword: str = Field(min_length=8, max_length=300)\n    role: Optional[str] = Field(default='user')\n    @field_validator('username')\n    def validate_username(cls, value: Optional[str]):",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "ChangePasswordInput",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class ChangePasswordInput(BaseModel):\n    token: str = Field(min_length=2, max_length=100)\n    newPassword: str = Field(min_length=8, max_length=300)\n    confirmPassword: str = Field(min_length=8, max_length=300)\n    @field_validator('newPassword')\n    def validate_password_strength(cls, value: str):\n        if len(value) < 8:\n            raise ValueError('Password must be at least 8 characters long')\n        if not re.search(r\"[0-9!@#$%^&*(),.?\\\":{}|<>]\", value):\n            raise ValueError('Password must contain at least one number or special character')",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "DeleteUserInput",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class DeleteUserInput(BaseModel):\n    username: str = Field(min_length=2, max_length=100)\n    @field_validator('username')\n    def validate_username(cls, value: str):\n        if not value.isalnum():\n            raise ValueError('Username must only contain alphanumeric characters')\n        return value\nclass ContactUsInput(BaseModel):\n    full_name: str = Field(min_length=2, max_length=100)\n    email: EmailStr = Field(...)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "ContactUsInput",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class ContactUsInput(BaseModel):\n    full_name: str = Field(min_length=2, max_length=100)\n    email: EmailStr = Field(...)\n    topic: str = Field(min_length=1, max_length=200)\n    message: str = Field(min_length=1, max_length=300)\nclass reportBugInput(BaseModel):\n    full_name: str = Field(min_length=2, max_length=100)\n    email: EmailStr = Field(...)\n    bug: str = Field(min_length=1, max_length=200)\n    description: str = Field(min_length=1, max_length=300)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "reportBugInput",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class reportBugInput(BaseModel):\n    full_name: str = Field(min_length=2, max_length=100)\n    email: EmailStr = Field(...)\n    bug: str = Field(min_length=1, max_length=200)\n    description: str = Field(min_length=1, max_length=300)\nclass UsernameCheckInput(BaseModel):\n    username: str\nclass UpdateProfileInput(BaseModel):\n    username: Optional[str] = Field(default=None, min_length=2, max_length=100)\n    first_name: Optional[str] = Field(min_length=2, max_length=100)",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UsernameCheckInput",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class UsernameCheckInput(BaseModel):\n    username: str\nclass UpdateProfileInput(BaseModel):\n    username: Optional[str] = Field(default=None, min_length=2, max_length=100)\n    first_name: Optional[str] = Field(min_length=2, max_length=100)\n    last_name: Optional[str] = Field(min_length=2, max_length=100)\n    @field_validator('username')\n    def validate_username(cls, value: Optional[str]):\n        if value is not None:\n            if not value.isalnum():",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "UpdateProfileInput",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class UpdateProfileInput(BaseModel):\n    username: Optional[str] = Field(default=None, min_length=2, max_length=100)\n    first_name: Optional[str] = Field(min_length=2, max_length=100)\n    last_name: Optional[str] = Field(min_length=2, max_length=100)\n    @field_validator('username')\n    def validate_username(cls, value: Optional[str]):\n        if value is not None:\n            if not value.isalnum():\n                raise ValueError('Username must only contain alphanumeric characters')\n        return value",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "ChangePasswordInputProfile",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class ChangePasswordInputProfile(BaseModel):\n    old_password: str = Field(..., description=\"The current password of the user.\")\n    new_password: str = Field(..., description=\"The new password for the user.\")\n    confirm_password: str = Field(..., description=\"Confirmation of the new password.\")\n    @field_validator('old_password')\n    def validate_password_strength(cls, value: str):\n        if len(value) < 8:\n            raise ValueError('Password must be at least 8 characters long')\n        if not re.search(r\"[0-9!@#$%^&*(),.?\\\":{}|<>]\", value):\n            raise ValueError('Password must contain at least one number or special character')",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "app.models.writer",
        "description": "app.models.writer",
        "peekOfCode": "class Writer(Base):\n    __tablename__ = \"writers\"  # Renamed table to follow snake_case naming convention\n    id = Column(Integer, primary_key=True, index=True)\n    first_name = Column(String(100), nullable=False)  # Renamed columns to snake_case\n    last_name = Column(String(100), nullable=False)\n    profile_picture_id = Column(Integer, ForeignKey('media.id'), nullable=False)\n    is_internal = Column(Boolean, nullable=False, default=True)\n    #username = Column(String(100), nullable=False, unique=True)\n    #password = Column(String(300), nullable=False)\n    #linkedin_profile = Column(String(300), nullable=False)  # Renamed to snake_case",
        "detail": "app.models.writer",
        "documentation": {}
    },
    {
        "label": "WriterAffiliate",
        "kind": 6,
        "importPath": "app.models.writer",
        "description": "app.models.writer",
        "peekOfCode": "class WriterAffiliate(Base):\n    __tablename__ = \"writer_affiliates\"  # Renamed to snake_case\n    writer_id = Column(Integer, ForeignKey('writers.id'), primary_key=True)\n    corporation_id = Column(Integer, ForeignKey('newsCorporations.id'), primary_key=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n'''\nclass Review(Base):\n    __tablename__ = \"reviews\"  # Renamed to snake_case\n    id = Column(Integer, primary_key=True, index=True)",
        "detail": "app.models.writer",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "app.models.writer",
        "description": "app.models.writer",
        "peekOfCode": "class Review(Base):\n    __tablename__ = \"reviews\"  # Renamed to snake_case\n    id = Column(Integer, primary_key=True, index=True)\n    writer_id = Column(Integer, ForeignKey('writers.id'), nullable=False)\n    news_id = Column(Integer, ForeignKey('news.id'), nullable=False)\n    title = Column(String(300), nullable=False)\n    description = Column(String(800), nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    # Define relationships",
        "detail": "app.models.writer",
        "documentation": {}
    },
    {
        "label": "ReviewMedia",
        "kind": 6,
        "importPath": "app.models.writer",
        "description": "app.models.writer",
        "peekOfCode": "class ReviewMedia(Base):\n    __tablename__ = \"review_media\"  # Renamed to snake_case\n    review_id = Column(Integer, ForeignKey('reviews.id'), primary_key=True)\n    media_id = Column(Integer, ForeignKey('media.id'), primary_key=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\nclass Feedback(Base):\n    __tablename__ = \"feedback\"  # Renamed to snake_case\n    writer_id = Column(Integer, ForeignKey('writers.id'), primary_key=True)\n    news_id = Column(Integer, ForeignKey('news.id'), primary_key=True)",
        "detail": "app.models.writer",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "app.models.writer",
        "description": "app.models.writer",
        "peekOfCode": "class Feedback(Base):\n    __tablename__ = \"feedback\"  # Renamed to snake_case\n    writer_id = Column(Integer, ForeignKey('writers.id'), primary_key=True)\n    news_id = Column(Integer, ForeignKey('news.id'), primary_key=True)\n    approved = Column(Boolean, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    # Define relationships\n    writer = relationship('Writer', back_populates='feedbacks')\n    news = relationship('News', back_populates='feedbacks')",
        "detail": "app.models.writer",
        "documentation": {}
    },
    {
        "label": "NewsWriter",
        "kind": 6,
        "importPath": "app.models.writer",
        "description": "app.models.writer",
        "peekOfCode": "class NewsWriter(Base):\n    __tablename__ = \"news_writer\"  # Renamed to snake_case\n    writer_id = Column(Integer, ForeignKey('writers.id'), primary_key=True)\n    news_id = Column(Integer, ForeignKey('news.id'), primary_key=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    # Define relationships\n    writer = relationship('Writer', back_populates='news_written')\n    news = relationship('News', back_populates='writers')\n'''",
        "detail": "app.models.writer",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.authRouter",
        "description": "app.routers.authRouter",
        "peekOfCode": "router = APIRouter(prefix=\"/auth\", tags=[\"auth\"])\nlimiter = Limiter(key_func=get_remote_address)\n@router.post(\"/user/signup\")\nasync def create_user(\n    request: Request,\n    response: Response,\n    user: UserInput,\n    db: Session = Depends(get_db)\n):\n    return await register_user(request, response, user)",
        "detail": "app.routers.authRouter",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.routers.authRouter",
        "description": "app.routers.authRouter",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\n@router.post(\"/user/signup\")\nasync def create_user(\n    request: Request,\n    response: Response,\n    user: UserInput,\n    db: Session = Depends(get_db)\n):\n    return await register_user(request, response, user)\n'''",
        "detail": "app.routers.authRouter",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.commonRouter",
        "description": "app.routers.commonRouter",
        "peekOfCode": "router = APIRouter(prefix=\"/common\", tags=[\"common\"])\nlimiter = Limiter(key_func=get_remote_address)\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nALLOWED_MIME_TYPES = [\n    \"application/pdf\",\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/jpg\",\n]  # Add allowed MIME types\nMAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB",
        "detail": "app.routers.commonRouter",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.routers.commonRouter",
        "description": "app.routers.commonRouter",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nALLOWED_MIME_TYPES = [\n    \"application/pdf\",\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/jpg\",\n]  # Add allowed MIME types\nMAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB\n@router.post(\"/file/upload/\")",
        "detail": "app.routers.commonRouter",
        "documentation": {}
    },
    {
        "label": "user_dependency",
        "kind": 5,
        "importPath": "app.routers.commonRouter",
        "description": "app.routers.commonRouter",
        "peekOfCode": "user_dependency = Annotated[dict, Depends(get_current_user)]\nALLOWED_MIME_TYPES = [\n    \"application/pdf\",\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/jpg\",\n]  # Add allowed MIME types\nMAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB\n@router.post(\"/file/upload/\")\nasync def upload_document(",
        "detail": "app.routers.commonRouter",
        "documentation": {}
    },
    {
        "label": "ALLOWED_MIME_TYPES",
        "kind": 5,
        "importPath": "app.routers.commonRouter",
        "description": "app.routers.commonRouter",
        "peekOfCode": "ALLOWED_MIME_TYPES = [\n    \"application/pdf\",\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/jpg\",\n]  # Add allowed MIME types\nMAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB\n@router.post(\"/file/upload/\")\nasync def upload_document(\n    request: Request,",
        "detail": "app.routers.commonRouter",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_SIZE",
        "kind": 5,
        "importPath": "app.routers.commonRouter",
        "description": "app.routers.commonRouter",
        "peekOfCode": "MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB\n@router.post(\"/file/upload/\")\nasync def upload_document(\n    request: Request,\n    user: user_dependency,\n    db: db_dependency,\n    file_type: str = Form(...),\n    file: UploadFile = File(...),\n):\n    # Read the contents of the file",
        "detail": "app.routers.commonRouter",
        "documentation": {}
    },
    {
        "label": "read_continent",
        "kind": 2,
        "importPath": "app.routers.locationRouter",
        "description": "app.routers.locationRouter",
        "peekOfCode": "def read_continent(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    continent = locationService.get_continent(db, id)\n    if continent is None:\n        raise HTTPException(status_code=404, detail=\"Continent not found\")\n    return continent\n@router.get(\"/countries/{id}\", status_code=status.HTTP_200_OK)\ndef read_country(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    country = locationService.get_country(db, id)\n    if country is None:\n        raise HTTPException(status_code=404, detail=\"Country not found\")",
        "detail": "app.routers.locationRouter",
        "documentation": {}
    },
    {
        "label": "read_country",
        "kind": 2,
        "importPath": "app.routers.locationRouter",
        "description": "app.routers.locationRouter",
        "peekOfCode": "def read_country(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    country = locationService.get_country(db, id)\n    if country is None:\n        raise HTTPException(status_code=404, detail=\"Country not found\")\n    return country\n@router.get(\"/provinces/{id}\", status_code=status.HTTP_200_OK)\ndef read_province(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    province = locationService.get_province(db, id)\n    if province is None:\n        raise HTTPException(status_code=404, detail=\"Province not found\")",
        "detail": "app.routers.locationRouter",
        "documentation": {}
    },
    {
        "label": "read_province",
        "kind": 2,
        "importPath": "app.routers.locationRouter",
        "description": "app.routers.locationRouter",
        "peekOfCode": "def read_province(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    province = locationService.get_province(db, id)\n    if province is None:\n        raise HTTPException(status_code=404, detail=\"Province not found\")\n    return province\n@router.get(\"/cities/{id}\", status_code=status.HTTP_200_OK)\ndef read_city(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    city = locationService.get_city(db, id)\n    if city is None:\n        raise HTTPException(status_code=404, detail=\"City not found\")",
        "detail": "app.routers.locationRouter",
        "documentation": {}
    },
    {
        "label": "read_city",
        "kind": 2,
        "importPath": "app.routers.locationRouter",
        "description": "app.routers.locationRouter",
        "peekOfCode": "def read_city(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    city = locationService.get_city(db, id)\n    if city is None:\n        raise HTTPException(status_code=404, detail=\"City not found\")\n    return city",
        "detail": "app.routers.locationRouter",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.locationRouter",
        "description": "app.routers.locationRouter",
        "peekOfCode": "router = APIRouter(prefix=\"/locations\", tags=[\"Locations\"])\n@router.get(\"/continents/{id}\", status_code=status.HTTP_200_OK)\ndef read_continent(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    continent = locationService.get_continent(db, id)\n    if continent is None:\n        raise HTTPException(status_code=404, detail=\"Continent not found\")\n    return continent\n@router.get(\"/countries/{id}\", status_code=status.HTTP_200_OK)\ndef read_country(id: int = Path(gt=0), db: Session = Depends(get_db)):\n    country = locationService.get_country(db, id)",
        "detail": "app.routers.locationRouter",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.newsRouter",
        "description": "app.routers.newsRouter",
        "peekOfCode": "router = APIRouter(prefix=\"/news\", tags=[\"news\"])\nlimiter = Limiter(key_func=get_remote_address)\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n@router.post(\"/add\")\nasync def create_news(\n        request: Request,\n        user: user_dependency,\n        db: db_dependency,\n        news_input: NewsInput):\n    return await add_news_from_newsInput(db, news_input);",
        "detail": "app.routers.newsRouter",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.routers.newsRouter",
        "description": "app.routers.newsRouter",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n@router.post(\"/add\")\nasync def create_news(\n        request: Request,\n        user: user_dependency,\n        db: db_dependency,\n        news_input: NewsInput):\n    return await add_news_from_newsInput(db, news_input);\n@router.get(\"/get\")",
        "detail": "app.routers.newsRouter",
        "documentation": {}
    },
    {
        "label": "user_dependency",
        "kind": 5,
        "importPath": "app.routers.newsRouter",
        "description": "app.routers.newsRouter",
        "peekOfCode": "user_dependency = Annotated[dict, Depends(get_current_user)]\n@router.post(\"/add\")\nasync def create_news(\n        request: Request,\n        user: user_dependency,\n        db: db_dependency,\n        news_input: NewsInput):\n    return await add_news_from_newsInput(db, news_input);\n@router.get(\"/get\")\nasync def get_news(",
        "detail": "app.routers.newsRouter",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.newsSourceRouter",
        "description": "app.routers.newsSourceRouter",
        "peekOfCode": "router = APIRouter(prefix=\"/newsSource\", tags=[\"newsSource\"])\nlimiter = Limiter(key_func=get_remote_address)\n@router.get(\"/get-all\")\nasync def get_all_news_sources(\n        request: Request,\n        user: user_dependency,\n        db: db_dependency):\n    return await get_all_news_sources_db()\n@router.get(\"/landing\")\nasync def get_all_news_sources(",
        "detail": "app.routers.newsSourceRouter",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.routers.newsSourceRouter",
        "description": "app.routers.newsSourceRouter",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\n@router.get(\"/get-all\")\nasync def get_all_news_sources(\n        request: Request,\n        user: user_dependency,\n        db: db_dependency):\n    return await get_all_news_sources_db()\n@router.get(\"/landing\")\nasync def get_all_news_sources(\n        request: Request,",
        "detail": "app.routers.newsSourceRouter",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.preferenceRouter",
        "description": "app.routers.preferenceRouter",
        "peekOfCode": "router = APIRouter(prefix=\"/preference\", tags=[\"preference\"])\nlimiter = Limiter(key_func=get_remote_address)\n@router.post(\"/reset_preference\")\nasync def add_news_source_preference_for_user(request: Request, user: user_dependency, db: db_dependency):\n    try:\n        await reset_preference_for_user(user)\n        return JSONResponse(status_code=200, content={\"message\": \"Success\"})\n    except Exception as e:\n        # Log the error or handle it as needed\n        raise HTTPException(status_code=500, detail=str(e))",
        "detail": "app.routers.preferenceRouter",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.routers.preferenceRouter",
        "description": "app.routers.preferenceRouter",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\n@router.post(\"/reset_preference\")\nasync def add_news_source_preference_for_user(request: Request, user: user_dependency, db: db_dependency):\n    try:\n        await reset_preference_for_user(user)\n        return JSONResponse(status_code=200, content={\"message\": \"Success\"})\n    except Exception as e:\n        # Log the error or handle it as needed\n        raise HTTPException(status_code=500, detail=str(e))\n@router.post(\"/add_news_source_preference\")",
        "detail": "app.routers.preferenceRouter",
        "documentation": {}
    },
    {
        "label": "TopicsModel",
        "kind": 6,
        "importPath": "app.routers.userRouter",
        "description": "app.routers.userRouter",
        "peekOfCode": "class TopicsModel(BaseModel):\n    topics: List[str]\n@router.post(\"/add-followings\")\nasync def add_following(\n        request_body: TopicsModel,  # Accept a list of topics instead of a single topic\n        request: Request,\n        user: user_dependency,\n        db: db_dependency):\n    topics = request_body.topics\n    added_topics = []  # To keep track of successfully added topics",
        "detail": "app.routers.userRouter",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.userRouter",
        "description": "app.routers.userRouter",
        "peekOfCode": "router = APIRouter(prefix=\"/user\", tags=[\"user\"])\nlimiter = Limiter(key_func=get_remote_address)\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n@router.get(\"/profile/check-username\")\nasync def check_username(\n    username: str\n):\n    # You might want to handle the database query logic here\n    exists = await check_username_in_db(username)\n    return {\"exists\": exists}",
        "detail": "app.routers.userRouter",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "app.routers.userRouter",
        "description": "app.routers.userRouter",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n@router.get(\"/profile/check-username\")\nasync def check_username(\n    username: str\n):\n    # You might want to handle the database query logic here\n    exists = await check_username_in_db(username)\n    return {\"exists\": exists}\n@router.patch(\"/profile/update\")",
        "detail": "app.routers.userRouter",
        "documentation": {}
    },
    {
        "label": "user_dependency",
        "kind": 5,
        "importPath": "app.routers.userRouter",
        "description": "app.routers.userRouter",
        "peekOfCode": "user_dependency = Annotated[dict, Depends(get_current_user)]\n@router.get(\"/profile/check-username\")\nasync def check_username(\n    username: str\n):\n    # You might want to handle the database query logic here\n    exists = await check_username_in_db(username)\n    return {\"exists\": exists}\n@router.patch(\"/profile/update\")\nasync def update_profile(input: UpdateProfileInput, authenticatedUser: user_dependency, db: db_dependency):",
        "detail": "app.routers.userRouter",
        "documentation": {}
    },
    {
        "label": "delete_user_func",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def delete_user_func(\n    request: Request, response: Response, db: Session, username: str\n):\n    # Retrieve the user from the database\n    user = db.query(User).filter(User.username == username).first()\n    # Check if the user exists\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    # Delete the user\n    db.delete(user)",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "generate_random_username",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def generate_random_username():\n    \"\"\"Generate a random username for a journalist with enhanced randomness.\"\"\"\n    entity = \"anonymous\"\n    random_number = random.randint(1, 99999999)  # Expanded range for greater randomness\n    return f\"{entity}_{random_number}\"\nasync def register_user(request: Request, response: Response, user: UserInput):\n    # Password Confirmation Check\n    if user.password != user.confirmPassword:\n        raise HTTPException(status_code=400, detail=\"Passwords do not match\")\n    async with aiomysql.create_pool(**conn_params) as pool:",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_loggedin_user",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def get_loggedin_user(request: Request, db: db_dependency):\n    # Extract the token from the request headers\n    token = request.headers.get(\"Authorization\")\n    if not token:\n        raise HTTPException(status_code=401, detail=\"No access token provided\")\n    # Remove the 'Bearer ' prefix if present\n    if token.startswith(\"Bearer \"):\n        token = token[7:]\n    try:\n        # Decode the token",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "check_token",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def check_token(token_str, db, activateIt=False, expiration=3600):\n    # Find the token in the database\n    token = db.query(Tokens).filter(Tokens.token == token_str).first()\n    if not token:\n        raise HTTPException(status_code=404, detail=\"Token not found\")\n    # Check if the token is expired\n    if datetime.utcnow() > token.expiration_date:\n        raise HTTPException(status_code=400, detail=\"Token expired\")\n    # Check if the token has already been used\n    if token.invalidated:",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "confirm_token_and_activate_account",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def confirm_token_and_activate_account(token_str, db):\n    user = check_token(token_str, db, True)\n    user.is_active = True\n    db.commit()\n    return {\"message\": \"Account activated successfully\"}\ndef confirm_token_and_getEmail(token_str, db, expiration=3600):\n    user = check_token(token_str, db, True, expiration=expiration)\n    return user.email\ndef invalidate_token(token_str, db, expiration=3600):\n    token = db.query(Tokens).filter(Tokens.token == token_str).first()",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "confirm_token_and_getEmail",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def confirm_token_and_getEmail(token_str, db, expiration=3600):\n    user = check_token(token_str, db, True, expiration=expiration)\n    return user.email\ndef invalidate_token(token_str, db, expiration=3600):\n    token = db.query(Tokens).filter(Tokens.token == token_str).first()\n    token.invalidated = True\n    db.commit()\nasync def initiate_password_reset(email: str, db: db_dependency):\n    # Check if a user with the given email exists\n    user = db.query(User).filter(User.email == email).first()",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "invalidate_token",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def invalidate_token(token_str, db, expiration=3600):\n    token = db.query(Tokens).filter(Tokens.token == token_str).first()\n    token.invalidated = True\n    db.commit()\nasync def initiate_password_reset(email: str, db: db_dependency):\n    # Check if a user with the given email exists\n    user = db.query(User).filter(User.email == email).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User with given email not found\")\n    if not user.is_active:  # Check if the existing user is not active",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_refresh_token",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def get_refresh_token(db: db_dependency, refresh_token: str):\n    try:\n        payload = validate_refresh_token(refresh_token)\n        user = db.query(User).filter(User.id == payload.get(\"id\")).first()\n        if not user:\n            raise HTTPException(status_code=401, detail=\"Invalid user\")\n        # Create new access and refresh tokens\n        access_data = {\"sub\": user.username, \"id\": user.id, \"role\": \"user\"}\n        new_access_token = create_access_token(access_data)\n        new_refresh_token = create_refresh_token(access_data)",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def change_password( response: Response, token_str: str, new_password: str, confirm_password: str, db):\n    # Confirm the token\n    email = confirm_token_and_getEmail(token_str, db)\n    # Check if new_password and confirm_password match\n    if new_password != confirm_password:\n        raise HTTPException(status_code=400, detail=\"Passwords do not match\")\n    # Retrieve user by email\n    user = db.query(User).filter(User.email == email).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "new_user_to_json",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def new_user_to_json(user: User):\n    return {\n        \"username\": user[\"username\"],\n        \"email\": user[\"email\"],\n        \"first_name\": user[\"first_name\"],\n        \"last_name\": user[\"last_name\"],\n        \"is_active\": user[\"is_active\"],\n    }\ndef user_to_json(user: User):\n    return {",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "user_to_json",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def user_to_json(user: User):\n    return {\n        \"username\": user.username,\n        \"email\": user.email,\n        \"first_name\": user.first_name,\n        \"last_name\": user.last_name,\n        \"is_active\": user.is_active,\n    }\ndef verify_password(plain_password: str, hashed_password: str):\n    return bcrypt_context.verify(plain_password, hashed_password)",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str):\n    return bcrypt_context.verify(plain_password, hashed_password)\ndef authenticate_user2(db: Session, username: str, password: str, is_email=False):\n    if is_email:\n        user = db.query(User).filter(User.email == username).first()\n    else:\n        user = db.query(User).filter(User.username == username).first()\n    if not user or not verify_password(password, user.hashed_password):\n        return False\n    return user",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "authenticate_user2",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def authenticate_user2(db: Session, username: str, password: str, is_email=False):\n    if is_email:\n        user = db.query(User).filter(User.email == username).first()\n    else:\n        user = db.query(User).filter(User.username == username).first()\n    if not user or not verify_password(password, user.hashed_password):\n        return False\n    return user\nasync def authenticate_user(username: str, password: str, is_email=False):\n    async with aiomysql.create_pool(**conn_params) as pool:",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def create_access_token(data: dict, expires_delta: timedelta = timedelta(minutes=15)):\n    to_encode = data.copy()\n    expires = datetime.utcnow() + expires_delta\n    to_encode.update({\"exp\": expires})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef decode_jwt(token: str):\n    try:\n        # Decode the token\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "decode_jwt",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def decode_jwt(token: str):\n    try:\n        # Decode the token\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail=\"Signature has expired\")\n    except jwt.InvalidTokenError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\ndef create_refresh_token(data: dict):",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def create_refresh_token(data: dict):\n    expires_delta = timedelta(days=7)  # Longer expiration for refresh tokens\n    return create_access_token(data, expires_delta)\ndef validate_refresh_token(token: str):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except JWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Invalid refresh token\"",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "validate_refresh_token",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def validate_refresh_token(token: str):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except JWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Invalid refresh token\"\n        )\ndef add_user_to_db(user_data: UserInput, db: db_dependency):\n    user_model = User(",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "add_user_to_db",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def add_user_to_db(user_data: UserInput, db: db_dependency):\n    user_model = User(\n        email=user_data.email,\n        username=user_data.username,\n        first_name=user_data.first_name,\n        last_name=user_data.last_name,\n        hashed_password=bcrypt_context.hash(user_data.password),\n        is_active=False,\n    )\n    db.add(user_model)",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "def get_current_user(token: Annotated[str, Depends(oauth2_bearer)]):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        user_id: int = payload.get(\"id\")\n        user_role: str = payload.get(\"role\")\n        if username is None or user_id is None:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Invalid authentication credentials\",",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "SECRET_KEY = getenv(\"SECRET_KEY\", \"your-default-secret-key\")\nBASE_URL = getenv(\"BASE_URL\", \"http://localhost:3000\")\nALGORITHM = \"HS256\"\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n###################################endpoint functions##############################################\nFORGET_SECRET_KEY = \"your_secret_key\"  # Use a strong, unique key\nFORGET_SECURITY_PASSWORD_SALT = \"your_security_salt\"\n# delete user\ndef delete_user_func(\n    request: Request, response: Response, db: Session, username: str",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "BASE_URL = getenv(\"BASE_URL\", \"http://localhost:3000\")\nALGORITHM = \"HS256\"\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n###################################endpoint functions##############################################\nFORGET_SECRET_KEY = \"your_secret_key\"  # Use a strong, unique key\nFORGET_SECURITY_PASSWORD_SALT = \"your_security_salt\"\n# delete user\ndef delete_user_func(\n    request: Request, response: Response, db: Session, username: str\n):",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "ALGORITHM = \"HS256\"\nbcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n###################################endpoint functions##############################################\nFORGET_SECRET_KEY = \"your_secret_key\"  # Use a strong, unique key\nFORGET_SECURITY_PASSWORD_SALT = \"your_security_salt\"\n# delete user\ndef delete_user_func(\n    request: Request, response: Response, db: Session, username: str\n):\n    # Retrieve the user from the database",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "bcrypt_context",
        "kind": 5,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "bcrypt_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n###################################endpoint functions##############################################\nFORGET_SECRET_KEY = \"your_secret_key\"  # Use a strong, unique key\nFORGET_SECURITY_PASSWORD_SALT = \"your_security_salt\"\n# delete user\ndef delete_user_func(\n    request: Request, response: Response, db: Session, username: str\n):\n    # Retrieve the user from the database\n    user = db.query(User).filter(User.username == username).first()",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "FORGET_SECRET_KEY",
        "kind": 5,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "FORGET_SECRET_KEY = \"your_secret_key\"  # Use a strong, unique key\nFORGET_SECURITY_PASSWORD_SALT = \"your_security_salt\"\n# delete user\ndef delete_user_func(\n    request: Request, response: Response, db: Session, username: str\n):\n    # Retrieve the user from the database\n    user = db.query(User).filter(User.username == username).first()\n    # Check if the user exists\n    if not user:",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "FORGET_SECURITY_PASSWORD_SALT",
        "kind": 5,
        "importPath": "app.services.authService",
        "description": "app.services.authService",
        "peekOfCode": "FORGET_SECURITY_PASSWORD_SALT = \"your_security_salt\"\n# delete user\ndef delete_user_func(\n    request: Request, response: Response, db: Session, username: str\n):\n    # Retrieve the user from the database\n    user = db.query(User).filter(User.username == username).first()\n    # Check if the user exists\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")",
        "detail": "app.services.authService",
        "documentation": {}
    },
    {
        "label": "get_news_category",
        "kind": 2,
        "importPath": "app.services.categoryService",
        "description": "app.services.categoryService",
        "peekOfCode": "def get_news_category(db: Session, news_id: int, category_id: int):\n    return db.query(NewsCategory).filter(NewsCategory.news_id == news_id, NewsCategory.category_id == category_id).first()\ndef create_news_category(db: Session, news_id: int, category_id: int):\n    # Check if the news_category already exists\n    existing_news_category = get_news_category(db, news_id, category_id)\n    # If it exists, return the existing entry\n    if existing_news_category:\n        return existing_news_category\n    # If it does not exist, create a new instance of NewsCategory\n    new_news_category = NewsCategory(news_id=news_id, category_id=category_id)",
        "detail": "app.services.categoryService",
        "documentation": {}
    },
    {
        "label": "create_news_category",
        "kind": 2,
        "importPath": "app.services.categoryService",
        "description": "app.services.categoryService",
        "peekOfCode": "def create_news_category(db: Session, news_id: int, category_id: int):\n    # Check if the news_category already exists\n    existing_news_category = get_news_category(db, news_id, category_id)\n    # If it exists, return the existing entry\n    if existing_news_category:\n        return existing_news_category\n    # If it does not exist, create a new instance of NewsCategory\n    new_news_category = NewsCategory(news_id=news_id, category_id=category_id)\n    # Add the new instance to the session and commit\n    db.add(new_news_category)",
        "detail": "app.services.categoryService",
        "documentation": {}
    },
    {
        "label": "get_media_by_name_and_type",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def get_media_by_name_and_type(\n    db: Session, file_name: str, file_type: str, file_ext: str\n):\n    return (\n        db.query(Media)\n        .filter(\n            Media.fileName == file_name,\n            Media.type == file_type,\n            Media.fileExtension == file_ext,\n        )",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_media_by_url",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def get_media_by_url(db: Session, url: str, isInternal: bool):\n    if isInternal:\n        # Extracting fileName, fileExtension, and type from the URL\n        mediaparts = url.split('/')\n        mediatype = mediaparts[0]\n        mediafileName, mediafileExtension = os.path.splitext(mediaparts[1])\n        mediafileExtension = mediafileExtension[1:]  # Remove the dot from the extension\n        # Query the database\n        return db.query(Media).filter_by(type=mediatype, fileName=mediafileName, fileExtension=mediafileExtension).first()\n    else:",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "add_media_by_url_to_db",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def add_media_by_url_to_db(db: Session, url: str, isInternal: bool):\n    if isInternal:\n        # Extracting fileName, fileExtension, and type from the URL\n        mediaparts = url.split('/')\n        mediatype = mediaparts[0]\n        mediafileName, mediafileExtension = os.path.splitext(mediaparts[1])\n        mediafileExtension = mediafileExtension[1:]  # Remove the dot from the extension\n    else:\n        # For external URLs, the entire URL is considered as fileName\n        mediatype = 'external'",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "delete_media",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def delete_media(db: Session, media_id: int):\n    media_item = db.query(Media).filter(Media.id == media_id).first()\n    if media_item:\n        db.delete(media_item)\n        db.commit()\ndef save_media(db: Session, file_name: str, file_type: str, file_extension: str):\n    new_media = Media(type=file_type, fileName=file_name, fileExtension=file_extension)\n    db.add(new_media)\n    db.commit()\n    return new_media",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "save_media",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def save_media(db: Session, file_name: str, file_type: str, file_extension: str):\n    new_media = Media(type=file_type, fileName=file_name, fileExtension=file_extension)\n    db.add(new_media)\n    db.commit()\n    return new_media\ndef add_entity(db: Session, entity: str):\n    new_entity = entity(name=entity)\n    db.add(new_entity)\n    db.commit()\n    return new_entity",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "add_entity",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def add_entity(db: Session, entity: str):\n    new_entity = entity(name=entity)\n    db.add(new_entity)\n    db.commit()\n    return new_entity\ndef get_entity_byID(db: Session, entity_id: int):\n    entity = db.query(entity).filter(entity.id == entity_id).first()\n    return entity\ndef get_category_by_id(db: Session, category_id:int):\n    existing_category = db.query(Category).filter(",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_entity_byID",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def get_entity_byID(db: Session, entity_id: int):\n    entity = db.query(entity).filter(entity.id == entity_id).first()\n    return entity\ndef get_category_by_id(db: Session, category_id:int):\n    existing_category = db.query(Category).filter(\n        Category.id == category_id,\n    ).first()\n    return existing_category\ndef is_category_path_invalid(category_path: str):\n    # Regular expression for allowed characters in category names",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_category_by_id",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def get_category_by_id(db: Session, category_id:int):\n    existing_category = db.query(Category).filter(\n        Category.id == category_id,\n    ).first()\n    return existing_category\ndef is_category_path_invalid(category_path: str):\n    # Regular expression for allowed characters in category names\n    valid_name_pattern = re.compile(r'^[A-Za-z0-9-/]+$')\n    # Check for consecutive forward slashes\n    if '//' in category_path:",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "is_category_path_invalid",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def is_category_path_invalid(category_path: str):\n    # Regular expression for allowed characters in category names\n    valid_name_pattern = re.compile(r'^[A-Za-z0-9-/]+$')\n    # Check for consecutive forward slashes\n    if '//' in category_path:\n        return True\n    # Validate the entire path before splitting into categories\n    if not valid_name_pattern.match(category_path):\n        return True\n    # category_path can not be empty",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "add_news_categories_db",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def add_news_categories_db(db: Session, category_path: str, news_id: int):\n    if is_category_path_invalid(category_path):\n        return {\"message\": \"Invalid category path\"}\n    # Split the category path into hierarchical components\n    categories = category_path.strip(\"/\").split(\"/\")\n    category_ids = []\n    parent_id = 0  # Start with the root parent_id\n    for category_name in categories:\n        # Check if the category already exists\n        existing_category = db.query(Category).filter(",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "add_category_db",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def add_category_db(db: Session, category_path: str):\n    if is_category_path_invalid(category_path):\n        return {\"message\": \"Invalid category path\"}\n    # Split the category path into hierarchical components\n    categories = category_path.strip(\"/\").split(\"/\")\n    category_ids = []\n    parent_id = 0  # Start with the root parent_id\n    for category_name in categories:\n        # Check if the category already exists\n        existing_category = db.query(Category).filter(",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_category",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def get_category(db: Session, category_path: str):\n    if is_category_path_invalid(category_path):\n        return {\"message\": \"Invalid category path\"}\n    existing_category = None\n    if \"/\" not in category_path:\n        existing_category = db.query(Category).filter(\n            Category.name == category_path,\n        ).first()\n    else:\n        # Split the category path into hierarchical components",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "delete_last_category",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def delete_last_category(db: Session, category_path: str):\n    if is_category_path_invalid(category_path):\n        return {\"message\": \"Invalid category path\"}\n    # Find the last category using similar logic as in get_category\n    existing_category = None\n    if \"/\" not in category_path:\n        existing_category = db.query(Category).filter(\n            Category.name == category_path,\n        ).first()\n    else:",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "delete_all_categories_in_path",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def delete_all_categories_in_path(db: Session, category_path: str):\n    if is_category_path_invalid(category_path):\n        return {\"message\": \"Invalid category path\"}\n    if \"/\" not in category_path:\n        # If the path is a single category, just delete this category\n        return delete_last_category(db, category_path)\n    categories = category_path.strip(\"/\").split(\"/\")\n    parent_id = 0\n    for category_name in categories:\n        # Find and delete each category in the path",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_category_by_parentID",
        "kind": 2,
        "importPath": "app.services.commonService",
        "description": "app.services.commonService",
        "peekOfCode": "def get_category_by_parentID(db:Session, parent_category_id: int):\n    existing_category = db.query(Category).filter(\n        Category.parent_id == parent_category_id,\n    ).all()\n    return existing_category",
        "detail": "app.services.commonService",
        "documentation": {}
    },
    {
        "label": "get_continent",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def get_continent(db: Session, continent_id: int):\n    return db.query(Continent).filter(Continent.id == continent_id).first()\ndef get_country(db: Session, country_id: int):\n    return db.query(Country).filter(Country.id == country_id).first()\ndef get_province(db: Session, province_id: int):\n    return db.query(Province).filter(Province.id == province_id).first()\ndef get_city(db: Session, city_id: int):\n    return db.query(City).filter(City.id == city_id).first()\ndef find_city_by_name(db, name):\n    return db.query(City).filter(City.name == name).first()",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "get_country",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def get_country(db: Session, country_id: int):\n    return db.query(Country).filter(Country.id == country_id).first()\ndef get_province(db: Session, province_id: int):\n    return db.query(Province).filter(Province.id == province_id).first()\ndef get_city(db: Session, city_id: int):\n    return db.query(City).filter(City.id == city_id).first()\ndef find_city_by_name(db, name):\n    return db.query(City).filter(City.name == name).first()\ndef find_province_by_name(db, name):\n    return db.query(Province).filter(Province.name == name).first()",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "get_province",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def get_province(db: Session, province_id: int):\n    return db.query(Province).filter(Province.id == province_id).first()\ndef get_city(db: Session, city_id: int):\n    return db.query(City).filter(City.id == city_id).first()\ndef find_city_by_name(db, name):\n    return db.query(City).filter(City.name == name).first()\ndef find_province_by_name(db, name):\n    return db.query(Province).filter(Province.name == name).first()\ndef find_country_by_name(db, name):\n    return db.query(Country).filter(Country.name == name).first()",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "get_city",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def get_city(db: Session, city_id: int):\n    return db.query(City).filter(City.id == city_id).first()\ndef find_city_by_name(db, name):\n    return db.query(City).filter(City.name == name).first()\ndef find_province_by_name(db, name):\n    return db.query(Province).filter(Province.name == name).first()\ndef find_country_by_name(db, name):\n    return db.query(Country).filter(Country.name == name).first()\ndef find_continent_by_country(db, country_id):\n    country = db.query(Country).filter(Country.id == country_id).first()",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "find_city_by_name",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def find_city_by_name(db, name):\n    return db.query(City).filter(City.name == name).first()\ndef find_province_by_name(db, name):\n    return db.query(Province).filter(Province.name == name).first()\ndef find_country_by_name(db, name):\n    return db.query(Country).filter(Country.name == name).first()\ndef find_continent_by_country(db, country_id):\n    country = db.query(Country).filter(Country.id == country_id).first()\n    if country:\n        return db.query(Continent).filter(Continent.id == country.continent_id).first()",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "find_province_by_name",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def find_province_by_name(db, name):\n    return db.query(Province).filter(Province.name == name).first()\ndef find_country_by_name(db, name):\n    return db.query(Country).filter(Country.name == name).first()\ndef find_continent_by_country(db, country_id):\n    country = db.query(Country).filter(Country.id == country_id).first()\n    if country:\n        return db.query(Continent).filter(Continent.id == country.continent_id).first()\n    return None\ndef add_news_location(db, news_id, continent_id, country_id, province_id, city_id):",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "find_country_by_name",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def find_country_by_name(db, name):\n    return db.query(Country).filter(Country.name == name).first()\ndef find_continent_by_country(db, country_id):\n    country = db.query(Country).filter(Country.id == country_id).first()\n    if country:\n        return db.query(Continent).filter(Continent.id == country.continent_id).first()\n    return None\ndef add_news_location(db, news_id, continent_id, country_id, province_id, city_id):\n    news_location = NewsLocation(\n        news_id=news_id,",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "find_continent_by_country",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def find_continent_by_country(db, country_id):\n    country = db.query(Country).filter(Country.id == country_id).first()\n    if country:\n        return db.query(Continent).filter(Continent.id == country.continent_id).first()\n    return None\ndef add_news_location(db, news_id, continent_id, country_id, province_id, city_id):\n    news_location = NewsLocation(\n        news_id=news_id,\n        continent_id=continent_id,\n        country_id=country_id,",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "add_news_location",
        "kind": 2,
        "importPath": "app.services.locationService",
        "description": "app.services.locationService",
        "peekOfCode": "def add_news_location(db, news_id, continent_id, country_id, province_id, city_id):\n    news_location = NewsLocation(\n        news_id=news_id,\n        continent_id=continent_id,\n        country_id=country_id,\n        province_id=province_id,\n        city_id=city_id\n    )\n    db.add(news_location)\n    db.commit()",
        "detail": "app.services.locationService",
        "documentation": {}
    },
    {
        "label": "extract_entities",
        "kind": 2,
        "importPath": "app.services.newsAnalyzer",
        "description": "app.services.newsAnalyzer",
        "peekOfCode": "def extract_entities(text, top_n=20):\n    # Tokenize and lemmatize the text\n    lemmatizer = WordNetLemmatizer()\n    tokens = word_tokenize(text)\n    words = [lemmatizer.lemmatize(word.lower()) for word in tokens if word.isalpha()]\n    # Initialize TF-IDF Vectorizer with custom settings\n    # Adjusted ngram_range to capture more phrases, which might be contextually relevant\n    vectorizer = TfidfVectorizer(stop_words='english', token_pattern=r'\\b[a-zA-Z]{3,}\\b', ngram_range=(1,3))\n    tfidf_matrix = vectorizer.fit_transform([' '.join(words)])\n    # Extract TF-IDF scores for the target text",
        "detail": "app.services.newsAnalyzer",
        "documentation": {}
    },
    {
        "label": "add_news_db",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def add_news_db(db: Session, news_input: NewsInput):\n    # Create a new News instance from the NewsInput data\n    news = News(\n        title=news_input.title,\n        shortSummary=news_input.shortSummary,\n        longSummary=news_input.longSummary,\n        content=news_input.content,\n        publishedDate=news_input.publishedDate,\n        language_id=news_input.language_id,\n        isInternal=news_input.isInternal,",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_by_title",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_by_title(db: Session, title: str):\n    return db.query(News).filter(News.title == title).first()\ndef get_news_by_id(db: Session, news_id: int):\n    return db.query(News).filter(News.id == news_id).first()\n# delete news by id\ndef delete_news_by_title(db: Session, news_title: str):\n    # Find the news item by title\n    news = db.query(News).filter(News.title == news_title).first()\n    if news:\n        # Delete associated NewsCategories",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_by_id",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_by_id(db: Session, news_id: int):\n    return db.query(News).filter(News.id == news_id).first()\n# delete news by id\ndef delete_news_by_title(db: Session, news_title: str):\n    # Find the news item by title\n    news = db.query(News).filter(News.title == news_title).first()\n    if news:\n        # Delete associated NewsCategories\n        db.query(NewsCategory).filter(NewsCategory.news_id == news.id).delete()\n        # Delete associated Newsentities",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "delete_news_by_title",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def delete_news_by_title(db: Session, news_title: str):\n    # Find the news item by title\n    news = db.query(News).filter(News.title == news_title).first()\n    if news:\n        # Delete associated NewsCategories\n        db.query(NewsCategory).filter(NewsCategory.news_id == news.id).delete()\n        # Delete associated Newsentities\n        db.query(Newsentities).filter(Newsentities.news_id == news.id).delete()\n        # Delete associated NewsMedia\n        db.query(NewsMedia).filter(NewsMedia.news_id == news.id).delete()",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "create_news_entity",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def create_news_entity(db: Session, news_id: int, entity_id: int):\n    news_entity = get_news_entity(db, news_id, entity_id)\n    if not news_entity:\n        news_entity = Newsentities(news_id=news_id, entity_id=entity_id)\n        db.add(news_entity)\n        db.commit()\n        db.refresh(news_entity)\n        return news_entity\n    return news_entity\ndef get_news_entity(db: Session, news_id: int, entity_id: int):",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_entity",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_entity(db: Session, news_id: int, entity_id: int):\n    return (\n        db.query(Newsentities)\n        .filter(Newsentities.news_id == news_id, Newsentities.entity_id == entity_id)\n        .first()\n    )\ndef create_news_media(db: Session, news_id: int, media_id: int):\n    news_media = get_news_media(db, news_id, media_id)\n    if not news_media:\n        news_media = NewsMedia(news_id=news_id, media_id=media_id)",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "create_news_media",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def create_news_media(db: Session, news_id: int, media_id: int):\n    news_media = get_news_media(db, news_id, media_id)\n    if not news_media:\n        news_media = NewsMedia(news_id=news_id, media_id=media_id)\n        db.add(news_media)\n        db.commit()\n        db.refresh(news_media)\n    return news_media\ndef get_news_media(db: Session, news_id: int, media_id: int):\n    return (",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_media",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_media(db: Session, news_id: int, media_id: int):\n    return (\n        db.query(NewsMedia)\n        .filter(NewsMedia.news_id == news_id, NewsMedia.media_id == media_id)\n        .first()\n    )\ndef get_news_for_video(db: Session, category_id: int, hours: int = 12):\n    if hours == 0 or hours is None:\n        return []\n    # Calculate the time for filtering",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_for_video",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_for_video(db: Session, category_id: int, hours: int = 12):\n    if hours == 0 or hours is None:\n        return []\n    # Calculate the time for filtering\n    time_threshold = datetime.utcnow() - timedelta(hours=hours)\n    # Perform the query\n    result = (\n        db.query(\n            News.title,\n            Media.mainImage,",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_affiliates",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_affiliates(db: Session, news_id: int, news_corporation_id: int, external_link: str):\n    return (\n        db.query(NewsAffiliates)\n        .filter(NewsAffiliates.news_id == news_id, NewsAffiliates.newsCorporation_id == news_corporation_id, NewsAffiliates.externalLink == external_link)\n        .first()\n    )\ndef create_news_affiliates(db: Session, news_id: int, corporation_id: int, external_link: str):\n    news_affiliate = get_news_affiliates(db, news_id, corporation_id, external_link)\n    if not news_affiliate:\n        news_affiliate = NewsAffiliates(news_id=news_id, newsCorporation_id=corporation_id, externalLink=external_link)",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "create_news_affiliates",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def create_news_affiliates(db: Session, news_id: int, corporation_id: int, external_link: str):\n    news_affiliate = get_news_affiliates(db, news_id, corporation_id, external_link)\n    if not news_affiliate:\n        news_affiliate = NewsAffiliates(news_id=news_id, newsCorporation_id=corporation_id, externalLink=external_link)\n        db.add(news_affiliate)\n        db.commit()\n        db.refresh(news_affiliate)\n    return news_affiliate\ndef get_news_corporations(db: Session, corporation_id:int):\n    return db.query(NewsCorporations).filter(NewsCorporations.id == corporation_id).first()",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_corporations",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_corporations(db: Session, corporation_id:int):\n    return db.query(NewsCorporations).filter(NewsCorporations.id == corporation_id).first()\ndef get_news_information(db: Session, news_id: int):\n    news = db.query(News).filter(News.id == news_id).first()\n    if news:\n        newsCard = {\n            \"id\": news.id,\n            \"title\": news.title,\n            \"shortSummary\": news.shortSummary,\n            \"longSummary\": news.longSummary,",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_information",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_information(db: Session, news_id: int):\n    news = db.query(News).filter(News.id == news_id).first()\n    if news:\n        newsCard = {\n            \"id\": news.id,\n            \"title\": news.title,\n            \"shortSummary\": news.shortSummary,\n            \"longSummary\": news.longSummary,\n            \"content\": news.content,\n            \"publishedDate\": news.publishedDate,",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_news_for_newsCard",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_news_for_newsCard(db: Session, listOfNews):\n    newsCards = []\n    for news in listOfNews:\n        newsCards.append(get_news_information(db, news.id))\n    return newsCards\ndef get_oldest_news_time(news_cards: List[dict]) -> str:\n    \"\"\"\n    Gets the published date of the oldest news item in the list.\n    Args:\n        news_cards: A list of news items, each represented as a dictionary.",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "get_oldest_news_time",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def get_oldest_news_time(news_cards: List[dict]) -> str:\n    \"\"\"\n    Gets the published date of the oldest news item in the list.\n    Args:\n        news_cards: A list of news items, each represented as a dictionary.\n    Returns:\n        The published date of the oldest news item as a string.\n        If the list is empty, returns an empty string.\n    \"\"\"\n    if not news_cards:",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "format_newscard",
        "kind": 2,
        "importPath": "app.services.newsService",
        "description": "app.services.newsService",
        "peekOfCode": "def format_newscard(rows: List[dict]) -> List[dict]:\n    if not rows:\n        return []\n    final_output = []\n    current_news = {}\n    for row in rows:\n        if row['title'] != current_news.get('title'):\n            if current_news:\n                # Convert sets to lists before appending\n                current_news['media'] = list(current_news['media'])",
        "detail": "app.services.newsService",
        "documentation": {}
    },
    {
        "label": "validate_writer",
        "kind": 2,
        "importPath": "app.services.writerService",
        "description": "app.services.writerService",
        "peekOfCode": "def validate_writer(db: Session, writer_id: int) -> bool:\n    writer = db.query(Writer).filter(Writer.id == writer_id).first()\n    return writer is not None",
        "detail": "app.services.writerService",
        "documentation": {}
    },
    {
        "label": "UploadError",
        "kind": 6,
        "importPath": "app.util.fileUpload",
        "description": "app.util.fileUpload",
        "peekOfCode": "class UploadError(Exception):\n    pass\n#await upload_to_spaces(file_name, file_path, file_ext)\nasync def upload_to_spaces(new_file_name: str,  file_path: str , file_extension: str, upload_file: UploadFile):\n    # Retrieve AWS credentials from environment variables\n    aws_access_key_id = os.getenv('AWS_ACCESS_KEY_ID')\n    aws_secret_access_key = os.getenv('AWS_SECRET_ACCESS_KEY')\n    FILE_BUCKET = os.getenv('FILE_BUCKET')\n    # Check if the credentials are available\n    if not aws_access_key_id or not aws_secret_access_key:",
        "detail": "app.util.fileUpload",
        "documentation": {}
    },
    {
        "label": "DeleteError",
        "kind": 6,
        "importPath": "app.util.fileUpload",
        "description": "app.util.fileUpload",
        "peekOfCode": "class DeleteError(Exception):\n    pass\nasync def delete_from_spaces(file_path: str):\n    # Retrieve AWS credentials from environment variables\n    aws_access_key_id = os.getenv('AWS_ACCESS_KEY_ID')\n    aws_secret_access_key = os.getenv('AWS_SECRET_ACCESS_KEY')\n    # Check if the credentials are available\n    if not aws_access_key_id or not aws_secret_access_key:\n        raise DeleteError(\"AWS credentials not available in environment variables.\")\n    # Configure your DigitalOcean Spaces credentials",
        "detail": "app.util.fileUpload",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "kind": 5,
        "importPath": "scripts.convertTime",
        "description": "scripts.convertTime",
        "peekOfCode": "conn_params = {\n    \"host\": os.getenv(\"DATABASE_HOST\", \"localhost\"),\n    \"port\": int(os.getenv(\"DATABASE_PORT\", \"3306\")),  # Convert port to integer\n    \"user\": os.getenv(\"DATABASE_USERNAME\", \"root\"),\n    \"password\": os.getenv(\"DATABASE_PASSWORD\", \"password\"),\n    \"db\": os.getenv(\"DATABASE_NAME\", \"newsdb\"),\n}\nasync def convert_news_dates_to_utc():\n    eastern = pytz.timezone('America/Toronto')\n    async with aiomysql.create_pool(**conn_params) as pool:",
        "detail": "scripts.convertTime",
        "documentation": {}
    },
    {
        "label": "test_register_existing_email",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_register_existing_email():\n    # Arrange\n    existing_user = UserInput(\n        username=\"sina3\",\n        email=\"msina.raf@gmail.com\",\n        first_name=\"Existing\",\n        last_name=\"User\",\n        password=\"ExistingPassword123!\",\n        confirmPassword=\"ExistingPassword123!\",\n        role=\"user\"",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_register_invalid_password",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_register_invalid_password():\n    try:\n        invalid_password_user = UserInput(\n            username=\"invalidpassworduser\",\n            email=\"invalidpassworduser@example.com\",\n            first_name=\"Invalid\",\n            last_name=\"Password\",\n            password=\"short\",\n            confirmPassword=\"short\",\n            role=\"user\"",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "login_test_user",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def login_test_user():\n    # Arrange\n    valid_user = {\n        \"username\": \"anonymous_86859973\",\n        \"password\": \"s1i1n1a1\"\n    }\n    # Act\n    response = client.post(\"/auth/user/login\", data=valid_user)\n    # Decode the JWT\n    token_data = decode_jwt(response.json()[\"access_token\"])",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_login_valid_user",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_login_valid_user():\n    logged_in_user = login_test_user()\n    token_data = logged_in_user['token_data']\n    response = logged_in_user['response']\n    valid_user = logged_in_user['valid_user']\n    # Check the username\n    assert token_data[\"sub\"] == valid_user[\"username\"]\n    assert token_data[\"user\"][\"is_active\"] == True\n    # Assert\n    assert response.status_code == 200",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_login_inactive_user",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_login_inactive_user():\n    # Arrange\n    valid_user = {\n        \"username\": \"test_urser\",\n        \"password\": \"s1i1n1a1\"\n    }\n    # Act\n    response = client.post(\"/auth/user/login\", data=valid_user)\n    # Assert\n    assert response.status_code == 403",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_login_invalid_user",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_login_invalid_user():\n    # Arrange\n    invalid_user = {\n        \"username\": \"invaliduser\",\n        \"password\": \"InvalidPassword123!\"\n    }\n    # Act\n    response = client.post(\"/auth/user/login\", data=invalid_user)\n    # Assert\n    assert response.status_code == 401",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_login_incorrect_password",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_login_incorrect_password():\n    # Arrange\n    invalid_user = {\n        \"username\": \"sina\",\n        \"password\": \"InvalidPassword123!\"\n    }\n    # Act\n    response = client.post(\"/auth/user/login\", data=invalid_user)\n    # Assert\n    assert response.status_code == 401",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_login_no_username",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_login_no_username():\n    # Arrange\n    invalid_user = {\n        \"password\": \"ValidPassword123!\"\n    }\n    # Act\n    response = client.post(\"/auth/user/login\", data=invalid_user)\n    # Assert\n    assert response.status_code == 422\n    assert \"username\" in response.json()[\"detail\"][0][\"loc\"]",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_login_no_password",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_login_no_password():\n    # Arrange\n    invalid_user = {\n        \"username\": \"validuser\"\n    }\n    # Act\n    response = client.post(\"/auth/user/login\", data=invalid_user)\n    # Assert\n    assert response.status_code == 422\n    assert \"password\" in response.json()[\"detail\"][0][\"loc\"]",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_register_no_password",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_register_no_password():\n    # Arrange\n    invalid_user = {\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"role\": \"user\"\n    }\n    # Act",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_register_no_email",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_register_no_email():\n    # Arrange\n    invalid_user = {\n        \"username\": \"testuser\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"password\": \"TestPassword123!\",\n        \"role\": \"user\"\n    }\n    # Act",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_register_no_first_name",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_register_no_first_name():\n    # Arrange\n    invalid_user = {\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"last_name\": \"User\",\n        \"password\": \"TestPassword123!\",\n        \"role\": \"user\"\n    }\n    # Act",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_register_no_last_name",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_register_no_last_name():\n    # Arrange\n    invalid_user = {\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"first_name\": \"Test\",\n        \"password\": \"TestPassword123!\",\n        \"role\": \"user\"\n    }\n    # Act",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_register_invalid_email_format",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_register_invalid_email_format():\n    # Arrange\n    invalid_user = {\n        \"username\": \"testuser\",\n        \"email\": \"invalidemailformat\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"password\": \"TestPassword123!\",\n        \"role\": \"user\"\n    }",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_register_password_lacks_complexity",
        "kind": 2,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "def test_register_password_lacks_complexity():\n    # Arrange\n    invalid_user = {\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"first_name\": \"Test\",\n        \"last_name\": \"User\",\n        \"password\": \"password\",\n        \"role\": \"user\"\n    }",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "tests.test_authRouter",
        "description": "tests.test_authRouter",
        "peekOfCode": "client = TestClient(app)\ndef test_register_existing_email():\n    # Arrange\n    existing_user = UserInput(\n        username=\"sina3\",\n        email=\"msina.raf@gmail.com\",\n        first_name=\"Existing\",\n        last_name=\"User\",\n        password=\"ExistingPassword123!\",\n        confirmPassword=\"ExistingPassword123!\",",
        "detail": "tests.test_authRouter",
        "documentation": {}
    },
    {
        "label": "test_get_category_empty",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_get_category_empty():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.get(\"/common/category\", params={\"category\": \"\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_add_category_empty():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.post(\"/common/category\", params={\"category\": \"\"}, headers=headers)",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_add_category_empty",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_add_category_empty():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.post(\"/common/category\", params={\"category\": \"\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_delete_category_empty():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.delete(\"/common/category\", params={\"category\": \"\"}, headers=headers)",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_delete_category_empty",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_delete_category_empty():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.delete(\"/common/category\", params={\"category\": \"\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_get_category_consecutive_slashes():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.get(\"/common/category\", params={\"category\": \"technology//gadgets\"}, headers=headers)",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_get_category_consecutive_slashes",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_get_category_consecutive_slashes():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.get(\"/common/category\", params={\"category\": \"technology//gadgets\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_add_category_consecutive_slashes():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.post(\"/common/category\", params={\"category\": \"sports//test_sport\"}, headers=headers)",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_add_category_consecutive_slashes",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_add_category_consecutive_slashes():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.post(\"/common/category\", params={\"category\": \"sports//test_sport\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_delete_category_consecutive_slashes():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.delete(\"/common/category\", params={\"category\": \"sports//test_sport\"}, headers=headers)",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_delete_category_consecutive_slashes",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_delete_category_consecutive_slashes():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.delete(\"/common/category\", params={\"category\": \"sports//test_sport\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_get_category_illegal_characters():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.get(\"/common/category\", params={\"category\": \"tech$@!nology\"}, headers=headers)",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_get_category_illegal_characters",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_get_category_illegal_characters():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.get(\"/common/category\", params={\"category\": \"tech$@!nology\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_add_category_illegal_characters():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.post(\"/common/category\", params={\"category\": \"sport@!test_sport\"}, headers=headers)",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_add_category_illegal_characters",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_add_category_illegal_characters():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.post(\"/common/category\", params={\"category\": \"sport@!test_sport\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_delete_category_illegal_characters():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.delete(\"/common/category\", params={\"category\": \"sport@!test_sport\"}, headers=headers)",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_delete_category_illegal_characters",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_delete_category_illegal_characters():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.delete(\"/common/category\", params={\"category\": \"sport@!test_sport\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_get_category_success_one_category():\n    # Login and get JWT token\n    jwt_token = test_login_valid_user()\n    # Headers with Authorization",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_get_category_success_one_category",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_get_category_success_one_category():\n    # Login and get JWT token\n    jwt_token = test_login_valid_user()\n    # Headers with Authorization\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.get(\"/common/category\", params={\"category\": \"Technology\"}, headers=headers)\n    # Assert\n    assert response.status_code == 200\n    assert \"category\" in response.json()",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_get_category_failure_one_category",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_get_category_failure_one_category():\n    # Login and get JWT token\n    jwt_token = test_login_valid_user()\n    # Headers with Authorization\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.get(\"/common/category\", params={\"category\": \"non-existent-category\"}, headers=headers)\n    # Assert\n    assert response.status_code == 404  # Assuming your API returns 404 for not found\n    assert response.json() == {\"detail\" : \"Category not found\"}",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_get_category_failure_2ndLevel_category",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_get_category_failure_2ndLevel_category():\n    # Login and get JWT token\n    jwt_token = test_login_valid_user()\n    # Headers with Authorization\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.get(\"/common/category\", params={\"category\": \"sports/non-existent-category\"}, headers=headers)\n    # Assert\n    assert response.status_code == 404  # Assuming your API returns 404 for not found\n    assert response.json() == {\"detail\" : \"Category not found\"}",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_get_category_failure_parent_2ndLevel_category",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_get_category_failure_parent_2ndLevel_category():\n    # Login and get JWT token\n    jwt_token = test_login_valid_user()\n    # Headers with Authorization\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.get(\"/common/category\", params={\"category\": \"non-existent-category/soccer\"}, headers=headers)\n    # Assert\n    assert response.status_code == 404  # Assuming your API returns 404 for not found\n    assert response.json() == {\"detail\" : \"Category not found\"}",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_add_category_success",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_add_category_success():\n    # Login and get JWT token\n    jwt_token = test_login_valid_user()\n    # Headers with Authorization\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.get(\"/common/category\", params={\"category\": \"sports/test-sport\"}, headers=headers)\n    if response.status_code == 200 and \"category\" in response.json():\n        client.delete(\"/common/category\", params={\"category\": \"sports/test-sport\"}, headers=headers)\n    # Act",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_upload_file",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_upload_file():\n    # Login and get JWT token\n    jwt_token = test_login_valid_user()\n    # Arrange for file upload\n    test_file_url = \"https://farabix-resources.nyc3.cdn.digitaloceanspaces.com/unittests/test_file.jpg\"\n    # Headers with Authorization\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act - Get the file content from the URL and upload the file\n    response = requests.get(test_file_url)\n    file_content = response.content",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_upload_invalid_file_type",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_upload_invalid_file_type():\n    # Login and get JWT token\n    jwt_token = test_login_valid_user()\n    # Arrange for file uploads\n    test_file_url = \"https://farabix-resources.nyc3.cdn.digitaloceanspaces.com/unittests/text_file.txt\"\n    # Headers with Authorization\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act - Get the file content from the URL and upload the file\n    response = requests.get(test_file_url)\n    file_content = response.content",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "test_delete_uploaded_file",
        "kind": 2,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "def test_delete_uploaded_file():\n    # Execute the upload test to get the necessary details\n    full_file_path, jwt_token = test_upload_file()\n    uploaded_file_name = full_file_path.split(\"/\")[-1]\n    # Extract file type and file extension from the uploaded file name\n    file_type = \"website\"  # Replace with actual file type\n    file_ext = uploaded_file_name.split(\".\")[-1]  # Assuming file_name includes the extension\n    file_name = uploaded_file_name.split(\".\")[0]  # Assuming file_name includes the extension\n    # Headers with Authorization\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "tests.test_commonRouter",
        "description": "tests.test_commonRouter",
        "peekOfCode": "client = TestClient(app)\ndef test_get_category_empty():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    response = client.get(\"/common/category\", params={\"category\": \"\"}, headers=headers)\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid category path\"}\ndef test_add_category_empty():\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}",
        "detail": "tests.test_commonRouter",
        "documentation": {}
    },
    {
        "label": "mock_db_session",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def mock_db_session():\n    # This is a mock session object\n    session = MagicMock()\n    return session\n# Test for add_news_categories_db\ndef test_add_news_categories_db(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = add_news_categories_db(mock_db_session, \"/category/subcategory\", 1)\n    assert response[\"message\"] == \"Category processed successfully\"\n    assert isinstance(response[\"category_ids\"], list)",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_add_news_categories_db",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_add_news_categories_db(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = add_news_categories_db(mock_db_session, \"/category/subcategory\", 1)\n    assert response[\"message\"] == \"Category processed successfully\"\n    assert isinstance(response[\"category_ids\"], list)\n# Test for add_category_db\ndef test_add_category_db(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = add_category_db(mock_db_session, \"/category/subcategory\")\n    assert response[\"message\"] == \"Category processed successfully\"",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_add_category_db",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_add_category_db(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = add_category_db(mock_db_session, \"/category/subcategory\")\n    assert response[\"message\"] == \"Category processed successfully\"\n    assert isinstance(response[\"category_ids\"], list)\n# Test for get_category\ndef test_get_category(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = get_category(mock_db_session, \"/category/subcategory\")\n    assert response[\"message\"] == \"Category not found\"",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_get_category",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_get_category(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = get_category(mock_db_session, \"/category/subcategory\")\n    assert response[\"message\"] == \"Category not found\"\n    mock_db_session.query(Category).filter.return_value.first.return_value = Category(id=1, name=\"subcategory\")\n    response = get_category(mock_db_session, \"/category/subcategory\")\n    assert response[\"message\"] == \"Got category successfully\"\n    assert response[\"category\"].id == 1\n    assert response[\"category\"].name == \"subcategory\"\ndef test_add_news_categories_db_existing_category(mock_db_session):",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_add_news_categories_db_existing_category",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_add_news_categories_db_existing_category(mock_db_session):\n    mock_existing_category = Category(id=1, name=\"category\")\n    mock_db_session.query(Category).filter.return_value.first.return_value = mock_existing_category\n    response = add_news_categories_db(mock_db_session, \"/category\", 1)\n    assert response[\"message\"] == \"Category processed successfully\"\n    assert 1 in response[\"category_ids\"]\ndef test_add_category_db_deep_hierarchy(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.side_effect = [None, None, Category(id=2, name=\"subcategory\")]\n    response = add_category_db(mock_db_session, \"/category/subcategory/subsubcategory\")\n    assert response[\"message\"] == \"Category processed successfully\"",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_add_category_db_deep_hierarchy",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_add_category_db_deep_hierarchy(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.side_effect = [None, None, Category(id=2, name=\"subcategory\")]\n    response = add_category_db(mock_db_session, \"/category/subcategory/subsubcategory\")\n    assert response[\"message\"] == \"Category processed successfully\"\n    assert len(response[\"category_ids\"]) == 3\ndef test_get_category_incomplete_hierarchy(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = get_category(mock_db_session, \"category/nonexistent-subcategory\")\n    assert response[\"message\"] == \"Category not found\"\ndef test_get_category_single_level(mock_db_session):",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_get_category_incomplete_hierarchy",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_get_category_incomplete_hierarchy(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = get_category(mock_db_session, \"category/nonexistent-subcategory\")\n    assert response[\"message\"] == \"Category not found\"\ndef test_get_category_single_level(mock_db_session):\n    mock_single_category = Category(id=1, name=\"category\")\n    mock_db_session.query(Category).filter.return_value.first.return_value = mock_single_category\n    response = get_category(mock_db_session, \"category\")\n    assert response[\"message\"] == \"Got category successfully\"\n    assert response[\"category\"].id == 1",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_get_category_single_level",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_get_category_single_level(mock_db_session):\n    mock_single_category = Category(id=1, name=\"category\")\n    mock_db_session.query(Category).filter.return_value.first.return_value = mock_single_category\n    response = get_category(mock_db_session, \"category\")\n    assert response[\"message\"] == \"Got category successfully\"\n    assert response[\"category\"].id == 1\ndef test_delete_last_category_success(mock_db_session):\n    mock_category = Category(id=1, name=\"category\")\n    mock_db_session.query(Category).filter.return_value.first.return_value = mock_category\n    response = delete_last_category(mock_db_session, \"category\")",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_delete_last_category_success",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_delete_last_category_success(mock_db_session):\n    mock_category = Category(id=1, name=\"category\")\n    mock_db_session.query(Category).filter.return_value.first.return_value = mock_category\n    response = delete_last_category(mock_db_session, \"category\")\n    mock_db_session.delete.assert_called_with(mock_category)\n    mock_db_session.commit.assert_called()\n    assert response[\"message\"] == \"Category deleted successfully\"\ndef test_delete_last_category_not_found(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = delete_last_category(mock_db_session, \"nonexistent-category\")",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_delete_last_category_not_found",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_delete_last_category_not_found(mock_db_session):\n    mock_db_session.query(Category).filter.return_value.first.return_value = None\n    response = delete_last_category(mock_db_session, \"nonexistent-category\")\n    assert response[\"message\"] == \"Category not found\"\ndef test_delete_all_categories_in_path_success(mock_db_session):\n    mock_category = Category(id=1, name=\"category\")\n    mock_subcategory = Category(id=2, name=\"subcategory\", parent_id=1)\n    # Mock the query object's first method to return mock_category and mock_subcategory\n    mock_query = mock_db_session.query(Category)\n    mock_query.filter.side_effect = [mock.MagicMock(first=mock.MagicMock(return_value=mock_category)),",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_delete_all_categories_in_path_success",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_delete_all_categories_in_path_success(mock_db_session):\n    mock_category = Category(id=1, name=\"category\")\n    mock_subcategory = Category(id=2, name=\"subcategory\", parent_id=1)\n    # Mock the query object's first method to return mock_category and mock_subcategory\n    mock_query = mock_db_session.query(Category)\n    mock_query.filter.side_effect = [mock.MagicMock(first=mock.MagicMock(return_value=mock_category)),\n                                     mock.MagicMock(first=mock.MagicMock(return_value=mock_subcategory))]\n    response = delete_all_categories_in_path(mock_db_session, \"category/subcategory\")\n    assert mock_db_session.delete.call_count == 2\n    mock_db_session.commit.assert_called()",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "test_delete_all_categories_in_path_not_found",
        "kind": 2,
        "importPath": "tests.test_commonService",
        "description": "tests.test_commonService",
        "peekOfCode": "def test_delete_all_categories_in_path_not_found(mock_db_session):\n    mock_category = Category(id=1, name=\"category\")\n    # Mock the query object's first method to return mock_category and then None\n    mock_query = mock_db_session.query(Category)\n    mock_query.filter.side_effect = [mock.MagicMock(first=mock.MagicMock(return_value=mock_category)),\n                                     mock.MagicMock(first=mock.MagicMock(return_value=None))]\n    response = delete_all_categories_in_path(mock_db_session, \"category/nonexistent-subcategory\")\n    assert response[\"message\"] == \"Category 'nonexistent-subcategory' not found in path\"",
        "detail": "tests.test_commonService",
        "documentation": {}
    },
    {
        "label": "get_test_news",
        "kind": 2,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "def get_test_news():\n    global title\n    news_title = title\n    logged_in_user = login_test_user()\n    response = logged_in_user['response']\n    jwt_token = response.json()[\"access_token\"]\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.get(f\"/news/get?news_title={news_title}\", headers=headers)\n    return response.json()",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "test_add_news_empty_title",
        "kind": 2,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "def test_add_news_empty_title():\n    jwt_token = test_login_valid_user()\n    # Arrange with empty title and valid content\n    news_input = NewsInput(\n        title=\"\",\n        shortSummary=\"Test short summary\",\n        longSummary=\"Test long summary\",\n        content=\"This is a test content for the news.\",\n        publishedDate=datetime.now().isoformat(),  # Convert to string\n        language_id=1,",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "test_add_news_empty_content",
        "kind": 2,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "def test_add_news_empty_content():\n    jwt_token = test_login_valid_user()\n    # Arrange with empty title and valid content\n    news_input = NewsInput(\n        title=\"this is just a test to check everything overall\",\n        shortSummary=\"Test short summary\",\n        longSummary=\"Test long summary\",\n        content=\"\",\n        publishedDate=datetime.now().isoformat(),  # Convert to string\n        language_id=1,",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "test_add_news_db",
        "kind": 2,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "def test_add_news_db():\n    jwt_token = test_login_valid_user()\n    response_data = get_test_news()\n    if \"message\" in response_data and response_data[\"message\"] == \"News found successfully.\":\n        tst_delete_news_db()\n    # Arrange\n    global title\n    news_input = NewsInput(\n        title=title,\n        shortSummary=\"Test short summary\",",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "test_add_news_empty_categories",
        "kind": 2,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "def test_add_news_empty_categories():\n    jwt_token = test_login_valid_user()\n    # Arrange with empty title and valid content\n    news_input = NewsInput(\n        title=\"this is just a test to check everything overall\",\n        shortSummary=\"Test short summary\",\n        longSummary=\"Test long summary\",\n        content=\"This is a test content for the news.\",\n        publishedDate=datetime.now().isoformat(),  # Convert to string\n        language_id=1,",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "tst_get_news_db",
        "kind": 2,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "def tst_get_news_db():\n    global title\n    news_title = title\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.get(f\"/news/get?news_title={news_title}\", headers=headers)\n    # Assert\n    assert response.status_code == 200\n    response_data = response.json()",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "tst_delete_news_db",
        "kind": 2,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "def tst_delete_news_db():\n    global title\n    news_title = title\n    jwt_token = test_login_valid_user()\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.delete(f\"/news/delete?news_title={news_title}\", headers=headers)\n    # Assert\n    assert response.status_code == 200\n    response_data = response.json()",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "client = TestClient(app)\ntitle = \"Test News1: this is just a test85\"\ndef get_test_news():\n    global title\n    news_title = title\n    logged_in_user = login_test_user()\n    response = logged_in_user['response']\n    jwt_token = response.json()[\"access_token\"]\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "tests.test_newsRouter",
        "description": "tests.test_newsRouter",
        "peekOfCode": "title = \"Test News1: this is just a test85\"\ndef get_test_news():\n    global title\n    news_title = title\n    logged_in_user = login_test_user()\n    response = logged_in_user['response']\n    jwt_token = response.json()[\"access_token\"]\n    headers = {\"Authorization\": f\"Bearer {jwt_token}\"}\n    # Act\n    response = client.get(f\"/news/get?news_title={news_title}\", headers=headers)",
        "detail": "tests.test_newsRouter",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "virtualvenv.Scripts.jp",
        "description": "virtualvenv.Scripts.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "virtualvenv.Scripts.jp",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def health_check():\n    return {\"status\": \"ok\"}\nif __name__ == \"__main__\":\n    config = uvicorn.Config(app=app, host=\"0.0.0.0\", port=8080, workers=4, reload=True)\n    server = uvicorn.Server(config)\n    server.run()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\napp = FastAPI()\norigins = [\n    \"http://www.farabix.com\",\n    \"https://www.farabix.com\",\n    \"http://farabix.com\",\n    \"https://farabix.com\",\n    \"https://website-buxry.ondigitalocean.app\",\n    \"http://website-buxry.ondigitalocean.app\",\n    \"https://website-stage-hlo64.ondigitalocean.app\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\norigins = [\n    \"http://www.farabix.com\",\n    \"https://www.farabix.com\",\n    \"http://farabix.com\",\n    \"https://farabix.com\",\n    \"https://website-buxry.ondigitalocean.app\",\n    \"http://website-buxry.ondigitalocean.app\",\n    \"https://website-stage-hlo64.ondigitalocean.app\",\n    \"http://website-stage-hlo64.ondigitalocean.app\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "origins = [\n    \"http://www.farabix.com\",\n    \"https://www.farabix.com\",\n    \"http://farabix.com\",\n    \"https://farabix.com\",\n    \"https://website-buxry.ondigitalocean.app\",\n    \"http://website-buxry.ondigitalocean.app\",\n    \"https://website-stage-hlo64.ondigitalocean.app\",\n    \"http://website-stage-hlo64.ondigitalocean.app\",\n    \"https://stg.web.farabix.com\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app.state.limiter",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n# Include routers from controllers\napp.include_router(authRouter.router)\napp.include_router(locationRouter.router)\napp.include_router(commonRouter.router)\napp.include_router(newsRouter.router)\napp.include_router(userRouter.router)\napp.include_router(preferenceRouter.router)\napp.include_router(newsSourceRouter.router)",
        "detail": "main",
        "documentation": {}
    }
]